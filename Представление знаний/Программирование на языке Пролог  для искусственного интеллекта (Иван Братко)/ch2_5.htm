<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 2. Пункт 5</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch2_4.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch2_6.htm">Вперёд</a></p>
<script language="JavaScript">double_line();</script>


<h4>2. 5.&nbsp;&nbsp;&nbsp; Пример: обезьяна и банан</h4>

<p>Задача об обезьяне и банане часто используется
в качестве простого примера задачи из области
искуственного интеллекта. Наша пролог-программа,
способная ее решить, показывает, как механизмы
сопоставления и автоматических возвратов могут
применяться для подобных целей. Мы сначала
составим программу, не принимая во внимание
процедурную семантику, а затем детально изучим
ее процедурное поведение. Программа будет
компактной и наглядной.</p>

<p>Рассмотрим следующий вариант данной задачи.
Возле двери комнаты стоит обезьяна. В середине
этой комнаты к потолку подвешен банан. Обезьяна
голодна и хочет съесть банан, однако она не может
дотянуться до него, находясь на полу. Около окна
этой же комнаты на полу лежит ящик, которым
обезьяна может воспользоваться. Обезьяна может
предпринимать следующие действия: ходить по
полу, залезать на ящик, двигать ящик (если она уже
находится около него) и схватить банан, если она
стоит на ящике прямо под бананом. Может ли
обезьяна добраться до банана?</p>

<p>Одна из важных проблем при программировании
состоит в выборе (адекватного) представления
решаемой задачи в терминах понятий
используемого языка программирования. В нашем
случае мы можем считать, что &quot;обезьяний мир&quot;
всегда находится в некотором <em>состоянии</em>, и
оно может изменяться со временем. Текущее
состояние определяется взаиморасположением
объектов. Например, исходное состояние мира
определяется так:</p>

<p>(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Обезьяна у двери.<br>
(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Обезьяна на полу.<br>
(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ящик у окна.<br>
(4)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Обезьяна не имеет
банана.</p>

<p>Удобно объединить все эти четыре
информационных фрагмента в один структурный
объект. Давайте в качестве такого объединяющего
функтора выберем слово &quot;состояние&quot;. На рис.
2.12 в виде структурного объекта изображено
исходное состояние.</p>

<p>Нашу задачу можно рассматривать как игру для
одного игрока. Давайте, формализуем правила этой
игры. Первое, целью игры является ситуация, в
которой обезьяна имеет банан, т. е. любое
состояние, у которого в качестве четвертой
компоненты стоит &quot;имеет&quot;:</p>

<p><strong>&nbsp;&nbsp; </strong>&nbsp;&nbsp;&nbsp;&nbsp; <strong>состояние( -,
-, -, имеет)</strong></p>

<p>Второе, каковы разрешенные ходы, переводящие
мир из одного состояния в другое? Существуют
четыре типа ходов:</p>

<p>(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; схватить банан,<br>
(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; залезть на ящик,<br>
(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; подвинуть ящик,<br>
(4)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; перейти в другое место.</p>

<p align="center"><img src="pic/fig2_12.gif" width="336" height="121"
alt="fig2_12.gif (977 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 12.</strong>&nbsp; Исходное
состояние обезьяньего мира, представленное в
виде структурного объекта. Его четыре компоненты
суть горизонтальная позиция обезьяны,
вертикальная позиция обезьяны, позиция ящика,
наличие или отсутствие у обезьяны банана.</small></p>

<p>Не всякий ход допустим при всех возможных
состояниях мира. Например, ход &quot;схватить&quot;
допустим, только если обезьяна стоит на ящике
прямо под бананом (т.е. в середине комнаты) и еще
не имеет банана. Эти правила можно формализовать
в Прологе в виде трехместного отношения <strong>ход</strong>:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>ход( Состояние1, М,
Состояние2)</strong></p>

<p>Три аргумента этого отношения определяют ход,
следующим образом:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Состояние1 --------&gt;
Состояние2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
М</strong></p>

<p><strong>Состояние1</strong> это состояние до хода, <strong>М</strong>
- выполняемый ход, и <strong>Состояние2</strong> -
состояние после хода.</p>

<p>Ход &quot;схватить&quot;, вместе с необходимыми
ограничениями на состояние перед этим ходом,
можно выразить такой формулой:</p>

<p><strong>ход( состояние( середина, наящике, середина,
неимеет),</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>&nbsp; % Перед ходом</small><br>
<strong>&nbsp;&nbsp; </strong>&nbsp;&nbsp;&nbsp;&nbsp; <strong>схватить,</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Ход</small><br>
<strong>&nbsp;&nbsp; </strong>&nbsp;&nbsp;&nbsp;&nbsp; <strong>состояние(
середина, наящике, середина, имеет) ).</strong><br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% После хода</small></p>

<p>В этом факте говорится о том, что после хода у
обезьяны уже есть банан и что она осталась на
ящике в середине комнаты.</p>

<p>Таким же способом можно выразить и тот факт, что
обезьяна, находясь на полу, может перейти из
любой горизонтальной позиции Р1 в любую позицию
Р2. Обезьяна может это сделать независимо от
позиции ящика, а также независимо от того, есть у
нее банан или нет. Все это можно записать в виде
следующего прологовского факта:</p>

<p><strong>&nbsp;&nbsp; </strong>&nbsp;&nbsp;&nbsp;&nbsp; <strong>ход(
состояние( Р1, наполу, В, Н),</strong><br>
<strong>&nbsp;&nbsp; </strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>перейти(
Р1, Р2),</strong> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <small>%
Перейти из Р1 в Р2</small><br>
<strong>&nbsp;&nbsp; </strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>состояние(
Р2, наполу, В, Н) ).</strong></p>

<p>Заметим, что в этом предложении делается много
утверждений и, в частности: 

<ul>
  <li>выполненный ход состоял в том, чтобы &quot;перейти
    из некоторой позиции Р1 в некоторую позицию Р2&quot;;</li>
  <li>обезьяна находится на полу, как до, так и после
    хода;</li>
  <li>ящик находится в некоторой точке В, которая
    осталась неизменной после хода;</li>
  <li>состояние &quot;имеет банан&quot; остается
    неизменным после хода.</li>
</ul>

<p align="center"><img src="pic/fig2_13.gif" width="475" height="113"
alt="fig2_13.gif (1314 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 13.</strong>&nbsp; Рекурсивная
формулировка отношения <strong>можетзавладетъ</strong>.</small></p>

<p>Данное предложение на самом деле определяет
все множество возможных ходов указанного типа,
так как оно применимо к любой ситуации,
сопоставимой с состоянием, имеющим место перед
входом. Поэтому такое предложение иногда
называют <em>схемой</em> хода. Благодаря понятию
переменной, имеющемуся в Прологе, такие схемы
легко на нем запрограммировать.</p>

<p>Два других типа ходов: &quot;подвинуть&quot; и
&quot;залезть&quot; - легко определить аналогичным
способом.</p>

<p>Главный вопрос, на который должна ответить наша
программа, это вопрос: &quot;Может ли обезьяна,
находясь в некотором начальном состоянии&nbsp; S,
&nbsp; завладеть бананом?&quot; Его можно
сформулировать в виде предиката</p>

<p><strong>&nbsp;&nbsp; </strong>&nbsp;&nbsp;&nbsp;&nbsp; <strong>можетзавладеть(
S)</strong></p>

<p>где аргумент&nbsp; S&nbsp; -&nbsp; состояние обезьяньего
мира. Программа для <strong>можетзавладеть</strong>
может основываться на двух наблюдениях:</p>

<p>(1)&nbsp;&nbsp;&nbsp; Для любого состояния&nbsp; S,&nbsp; в
которой обезьяна уже имеет банан, предикат <strong>можетзавладеть</strong>
должен, конечно, быть истинным; в этом случае
никаких ходов не требуется. Вот соответствующий
прологовский факт:</p>

<p><strong>&nbsp;&nbsp; </strong>&nbsp;&nbsp;&nbsp;&nbsp; <strong>можетзавладеть(
состояние( -, -, -, имеет) ).</strong></p>

<p>(2)&nbsp;&nbsp;&nbsp; В остальных случаях требуется один
или более ходов. Обезьяна может завладеть
бананом в любом состоянии S1, если для него
существует ход из состояния Р1 в некоторое
состояние S2, такое, что, попав в него, обезьяна уже
сможет завладеть бананом (за нуль или более
ходов). Этот принцип показан на рис. 2.13.
Прологовская формула, соответствующая этому
правилу, такова:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>можетзавладеть( S1) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ход( S1, М, S2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
можетзавладеть( S2).</strong></p>

<p>Теперь мы полностью завершили нашу программу,
показанную на рис. 2.14.</p>

<p>Формулировка <strong>можетзавладеть</strong>
рекурсивна и совершенно аналогична формулировке
отношения <strong>предок</strong> из гл. 1 (ср. рис. 2.13 и 1.7).
Этот принцип используется в Прологе повсеместно.</p>

<p>Мы создали нашу программу &quot;непроцедурным&quot;
способом. Давайте теперь изучим ее <em>процедурное</em>
поведение, рассмотрев следующий вопрос к
программе:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>?-
&nbsp; можетзавладеть( состояние( удвери, наполу,
уокна, неимеет) ).</strong></p>

<p>Ответом пролог-системы будет &quot;да&quot;. Процесс,
выполняемый ею при этом, обрабатывает, в
соответствии с процедурной семантикой Пролога,
последовательность списков целей. Для этого
требуется некоторый перебор ходов, для отыскания
верного из нескольких альтернативных. В
некоторых точках при таком переборе будет сделан
неверный ход, ведущий в тупиковую ветвь процесса
вычислений. На этом этапе автоматический возврат
позволит исправить положение. На рис. 2.15
изображен процесс перебора.</p>
<script language="JavaScript">line();</script>


<p><small>% Разрешенные ходы</small></p>

<p><strong>ход( состояние( середина, на ящике,
середина, неимеет),</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>схватить,</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Схватить банан</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>состояние( середина,
наящике, середина, имеет)).</strong></p>

<p><strong>ход( состояние( Р, наполу, Р, Н),</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>залезть,</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Залезть на ящик</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>состояние( Р, наящике,
Р, Н) ).</strong></p>

<p><strong>ход( состояние( Р1, наполу, Р1, Н),</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>подвинуть( Р1, Р2),</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <small>%
Подвинуть ящик с Р1 на Р2</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>состояние( Р2, наполу,
Р2, Н) ).</strong></p>

<p><strong>ход( состояние( Р1, наполу, В, Н),</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>перейти( Р1, Р2),</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Перейти с Р1 на Р2</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>состояние( Р2, наполу,
В, Н) ).</strong></p>

<p><small>&nbsp;&nbsp;&nbsp; % <strong>можетзавладеть(Состояние):</strong>
обезьяна может завладеть<br>
&nbsp;&nbsp;&nbsp; % бананом, находясь в состоянии
Состояние</small></p>

<p><strong>можетзавладеть( состояние( -, -, -, имеет) ).</strong></p>

<p><small>&nbsp;&nbsp;&nbsp; % может 1:&nbsp; обезьяна уже его
имеет</small></p>

<p><strong>можетзавладеть( Состояние1) :-</strong></p>

<p><small>&nbsp;&nbsp;&nbsp; % может 2:&nbsp; Сделать что-нибудь,
чтобы завладеть им</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>ход( Состояние1, Ход,
Состояние2),</strong></p>

<p><small>&nbsp;&nbsp;&nbsp; % сделать что-нибудь</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>можетзавладеть(
Состояние2).</strong></p>

<p><small>&nbsp;&nbsp;&nbsp; % теперь может завладеть</small></p>
<script language="JavaScript">line();</script>


<p align="center"><small><strong>Рис. 2. 14.</strong>&nbsp; Программа для
задачи об обезьяне и банане.</small></p>

<p>Для ответа на наш вопрос системе пришлось
сделать лишь один возврат. Верная
последовательность ходов была найдена почти
сразу. Причина такой эффективности программы
кроется в том порядке, в</p>

<p align="center"><img src="pic/fig2_15.gif" width="524" height="473"
alt="fig2_15.gif (5397 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 15.</strong>&nbsp; Поиск банана
обезьяной. Перебор начинается в верхнем узле и
распространяется вниз, как показано.
Альтернативные ходы перебираются слева направо.
Возврат произошел только один раз.</small></p>

<p>котором в ней расположены предложения,
касающиеся отношения <strong>ход</strong>. В нашем
случае этот порядок (к счастью) оказался весьма
подходящим. Однако возможен и менее удачный
порядок. По правилам игры обезьяна могла бы с
легкостью ходить туда-сюда, даже не касаясь
ящика, или бесцельно двигать ящик в разные
стороны. Как будет видно из следующего раздела,
более тщательное исследование обнаруживает, что
порядок предложений в нашей программе является,
на самом деле, критическим моментом для
успешного решения задачи.</p>

<hr>

<p align="center"><a href="ch2_4.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch2_6.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
