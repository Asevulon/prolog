<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 8. Пункт 4</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch8_3.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch8_5.htm">Вперёд</a></p>
<a name="tn163"><script language="JavaScript">double_line();</script>


<h4>8. 4.&nbsp;&nbsp;&nbsp; <span id="t163">Отладка</span></h4>

<p>Когда программа не делает того, чего от нее
ждут, главной проблемой становится отыскание
ошибки (или ошибок). Всегда легче найти ошибку в
какой-нибудь части программы (или в отдельном
модуле), чем во всей программе. Поэтому следует
придерживаться следующего хорошего принципа:
проверять сначала более мелкие программные
единицы и только после того, как вы убедились, что
им можно доверять, начинать проверку большего
модуля или всей программы.</p>

<p>Отладка в Прологе облегчается двумя
обстоятельствами: во-первых, Пролог -
интерактивный язык, поэтому можно
непосредственно обратиться к любой части
программы, задав пролог-системе соответствующий
вопрос; во-вторых, в реализациях Пролога обычно
имеются специальные средства отладки.
Следствием этих двух обстоятельств является то,
что отладка программ на Прологе может
производиться, вообще говоря, значительно
эффективнее, чем в других языках
программирования.</p>

<p>Основным средством отладки является <em>трассировка</em>
(tracing). &quot;Трассировать цель&quot; означает:
предоставить пользователю информацию,
относящуюся к достижению этой цели в процессе ее
обработки пролог-системой. Эта информация
включает: 

<ul>
  <li>Входную информацию - имя предиката и значении
    аргументов в момент активизации цели.</li>
  <li>Выходную информацию - в случае успеха, значения
    аргументов, удовлетворяющих цели; в противном
    случае - сообщение о неуспехе.</li>
  <li>Информацию о повторном входе, т. е. об
    активизации той же цели в результате
    автоматического возврата.</li>
</ul>

<p>В промежутке между входом и выходом можно
получить трассировочную информацию для всех
подцелей этой цели. Таким образом, мы можем
следить за обработкой нашего вопроса на всем
протяжении нисходящего пути от исходной цели к
целям самого нижнего уровня, вплоть до отдельных
фактов. Такая детальная трассировка может
оказаться непрактичной из-за непомерно большого
количества трассировочной информации. Поэтому
пользователь может применить &quot;селективную&quot;
трассировку. Существуют два механизма селекции:
первый подавляет выдачу информации о целях,
расположенных ниже некоторого уровня; второй
трассирует не все предикаты, а только некоторые,
указанные пользователем.</p>

<p>Средства отладки приводятся в действие при
помощи системно-зависимых встроенных
предикатов. Обычно используется следующий
стандартный набор таких предикатов</a><a name="tn80">:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong><span id="t80">trace</span></strong></p>

<p>запускает полную трассировку всех целей,
следующих за <strong>trace</strong></a><a name="tn67">.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong><span id="t67">notrace</span></strong></p>

<p>прекращает дальнейшее трассирование</a><a name="tn76">.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong><span id="t76">spy( P)</span></strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(следи за Р)</p>

<p>устанавливает режим трассировки предиката Р.
Обращение к <strong>spy</strong> применяют, когда хотят
получить информацию только об указанном
предикате и избежать трассировочной информации
от других целей (как выше, так и ниже уровня
запуска Р). &quot;Следить&quot; можно сразу за
несколькими предикатами</a><a name="tn65">.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong><span id="t65">nospy( Р)</span></strong></p>

<p>прекращает &quot;слежку&quot; за Р.</p>

<p>Трассировка ниже определенной глубины может
быть подавлена во время выполнения программы при
помощи специальных команд. Существуют и другие
команды отладки, такие как возврат к предыдущей
точке процесса вычислений. После такого возврата
можно, например, повторить вычисления с большей
степенью детализации трассировки.</p>

<hr>
</a>

<p align="center"><a href="ch8_3.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch8_5.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
