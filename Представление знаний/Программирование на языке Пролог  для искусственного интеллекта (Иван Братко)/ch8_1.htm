<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 8. Пункт 1</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch7_6.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch8_2.htm">Вперёд</a></p>

<hr>

<h3 align="center">Глава 8</h3>

<h3 align="center">СТИЛЬ И МЕТОДЫ ПРОГРАММИРОВАНИЯ</h3>

<p>В этой главе мы рассмотрим некоторые общие
принципы хорошего программирования и обсудим, в
частности. следующие вопросы: &quot;Как
представлять себе прологовские программы? Из
каких элементов складывается хороший стиль
программирования на Прологе? Как отлаживать
пролог - программы? Как повысить их эффективность<a
name="tn304">?&quot;</p>
</a><a name="p8_1"><script language="JavaScript">double_line();</script>
</a>

<h4>8. 1.&nbsp;&nbsp;&nbsp; <span id="t304">Общие принципы хорошего
программирования</span></h4>

<p>Главный вопрос, касающийся хорошего
программирования, - это вопрос о том, что такое
хорошая программа. Ответ на этот вопрос не
тривиален, поскольку существуют разные критерии
качества программ.</p>

<p>Следующие критерии общеприняты: 

<ul>
  <li><em>Правильность</em>. Хорошая программа в первую
    очередь должна быть правильной, т. е. она должна
    делать именно то, для чего предназначалась. Это
    требование может показаться тривиальным и
    самоочевидным. Однако в случае сложных программ
    правильность достигается не так часто.
    Распространенной ошибкой при написании программ
    является пренебрежение этим очевидным
    критерием, когда большее внимание уделяется
    другим критериям - таким, как эффективность.</li>
  <li><em>Эффективность</em>. Хорошая программа не должна
    попусту тратить компьютерное время и память.</li>
  <li><em>Простота, читабельность</em>. Хорошая,
    программа должна быть легка для чтения и
    понимания. Она не должна быть более сложной, чем
    это необходимо. Следует избегать хитроумных
    программистских трюков, затемняющих смысл
    программы. Общая организация программы и
    расположение ее текста должны облегчать ее
    понимание.</li>
  <li><em>Удобство модификации</em>. Хорошая программа
    должна быть легко модифицируема и расширяема.
    Простота и модульная организация программы
    облегчают внесение в нее изменений.</li>
  <li><em>Живучесть</em>. Хорошая программа должна быть
    живучей. Она не должна сразу &quot;ломаться&quot;, если
    пользователь введет в нее неправильные или
    непредусмотренные данные. В случае подобных
    ошибок программа должна сохранять
    работоспособность и вести себя разумно (сообщать
    об ошибках).</li>
  <li><em>Документированность</em>. Хорошая программа
    должна быть хорошо документирована. Минимальная
    документация - листинг с достаточно подробными
    комментариями. </li>
</ul>

<p>Степень важности того или иного критерия
зависит от конкретной задачи, от обстоятельств
написания программы, а также от условий ее
эксплуатации. Наивысшим приоритетом пользуется,
без сомнения, правильность. Обычно простоте,
удобству модификации, живучести и
документированности придают во крайней мере не
меньший приоритет, чем эффективности.</p>

<p>Существует несколько общих соображений,
помогающих реализовать вышеупомянутые критерии
на практике. Одно важное правило состоит в том,
чтобы сначала <em>продумать</em> задачу, подлежащую
решению, и лишь затем приступать к написанию
текста программы на конкретном языке
программирования. Как только мы хорошо поймем
задачу, и способ ее решения будет нами полностью
и во всех деталях продуман, само
программирование окажется быстрым и легким
делом и появится неплохой шанс за короткое время
получить правильную программу.</p>

<p>Распространенной ошибкой является попытка
начать писать программу даже до того, как была
уяснена полная постановка задачи. Главная
причина, по которой следует воздерживаться от
преждевременного начала программирования,
состоит в том, что обдумывание задачи и поиск
метода ее решения должны проводиться в терминах,
наиболее адекватных самой этой задаче. Эти
термины чаще всего далеки от синтаксиса
применяемого языка программирования и могут
быть утверждениями на естественном языке и
рисунками.</p>

<p>Исходная формулировка способа решения задачи
должна быть затем трансформирована в программу,
но этот процесс трансформации может оказаться
нелегким.<a name="tn226"> Неплохим подходом</a> к его
осуществлению является применение принципа <em><span
id="t226">пошаговой детализации</span></em>. Исходная
формулировка рассматривается как &quot;решение
верхнего уровня&quot;, а окончательная программа -
как &quot;решение низшего уровня&quot;.</p>

<p>В соответствии с принципом пошаговой
детализации окончательная программа получается
после серии трансформаций или &quot;детализаций&quot;
решения. Мы начинаем с первого решения - решения
верхнего уровня, а затем последовательно
проходим по цепочке решений; все эти решения
эквивалентны, но каждое следующее решение
выражено более детально, чей предыдущее. На
каждом шагу детализации понятия,
использовавшиеся в предыдущих формулировках,
прорабатываются более подробно, а их
представление все более приближается к языку
программирования. Следует отдавать себе отчет в
том, что детализация касается не только процедур,
но и структур данных. На начальных шагах работают
обычно с более абстрактными, более крупными
информационными единицами, детальная структура
которых уточняется впоследствии.</p>

<p>Стратегия нисходящей пошаговой детализации
имеет следующие преимущества: 

<ul>
  <li>она позволяет сформулировать грубое решение в
    терминах, наиболее адекватных решаемой задаче;</li>
  <li>в терминах таких мощных понятий решение будет
    сжатым и простым, а потому скорее всего
    правильным;</li>
  <li>каждый шаг детализации должен быть достаточно
    малым, чтобы не представлять больших
    интеллектуальных трудностей, если это удалось -
    трансформация решения в новое, более детальное
    представление скорее всего будет выполнена
    правильно, а следовательно, таким же правильным
    окажется и полученное решение следующего шага
    детализации.</li>
</ul>

<p>В случае Пролога мы можем говорить о пошаговой
детализации <em>отношений</em>. Если существо задачи
требует мышления в алгоритмических терминах, то
мы можем также говорить и о детализации <em>алгоритмов</em>,
приняв процедурную точку зрения на Пролог. </p>

<p>Для того, чтобы удачно сформулировать решение
на некотором уровне детализации и придумать
полезные понятия для следующего, более низкого
уровня, нужны идеи. Поэтому программирование -
это творческий процесс, что верно в особенности,
когда речь идет о начинающих программистах. По
мере накопления опыта работа программиста
постепенно становится все менее искусством и все
более ремеслом. И все же главным остается вопрос:
как возникают идеи? Большинство идей приходит из
опыта, из тех задач, решения которых уже известны.
Если мы не знаем прямого решения задачи, то нам
может помочь уже решенная задача, похожая на
нашу. Другим источником идей является
повседневная жизнь. Например, если необходимо
запрограммировать сортировку списка, то можно
догадаться, как это сделать, если задать себе
вопрос: &quot;А как бы я сам стал действовать, чтобы
расположить экзаменационные листы студентов по
их фамилиям в алфавитном порядке?&quot;</p>

<p>Общие принципы, <a name="tn307">изложенные</a> в данном
разделе, известны также как составные части <span
id="t307">&quot;структурного программирования&quot;</span>;
они, в основном, применимы и к программированию
на Прологе. В следующих разделах мы обсудим их
более детально, обращая особое внимание на
применение этих принципов программирования к
Прологу.</p>

<hr>

<p align="center"><a href="ch7_6.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch8_2.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
