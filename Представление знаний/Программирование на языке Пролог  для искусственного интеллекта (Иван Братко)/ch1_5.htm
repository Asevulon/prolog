<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 1. Пункт 5</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch1_4.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch2_1.htm">Вперёд</a></p>
<script language="JavaScript">double_line();</script>


<h4>1. 5.&nbsp;&nbsp;&nbsp; Декларативный и процедурный
смысл программ</h4>

<p>До сих пор во всех наших примерах всегда можно
было понять результаты работы программы, точно
не зная, <em>как</em> система в действительности их
нашла. Поэтому стоит различать два уровня смысла
программы на Прологе, а именно: 

<ul>
  <li><em>декларативный смысл</em> <a name="tn252">и</li>
  <li><em><span id="t252">процедурный смысл</span></em></a><a name="tn106">.</li>
</ul>

<p><span id="t106">Декларативный смысл</span> касается
только <em>отношений</em>, определенных в программе.
Таким образом, декларативный смысл определяет, <em>что</em>
должно быть результатом работы программы. С
другой стороны, процедурный смысл определяет еще
и <em>как</em> этот результат был получен, т. е. как
отношения реально обрабатываются
пролог-системой. </p>

<p>Способность пролог-системы прорабатывать
многие процедурные детали самостоятельно
считается одним из специфических преимуществ
Пролога. Это свойство побуждает программиста
рассматривать декларативный смысл программы
относительно независимо от ее процедурного
смысла. Поскольку результаты работы программы в
принципе определяются ее декларативным смыслом,
последнего (Опять же в принципе) достаточно для
написания программ. Этот факт имеет практическое
значение, поскольку декларативные аспекты
программы являются, обычно, более легкими для
понимания, нежели процедурные детали. Чтобы
извлечь из этого обстоятельства наибольшую
пользу, программисту следует сосредоточиться
главным образом на декларативном смысле и по
возможности не отвлекаться на детали процесса
вычислений. Последние следует в возможно большей
мере предоставить самой пролог-системе.</p>

<p>Такой декларативный подход и в самом деле часто
делает программирование на Прологе более легким,
чем на таких типичных
процедурно-ориентированных языках, как Паскаль.
К сожалению, однако, декларативного подхода не
всегда оказывается, достаточно. Далее станет
ясно, что, особенно в больших программах,
программист не может полностью игнорировать
процедурные аспекты по соображениям
эффективности вычислений. Тем не менее следует
поощрять декларативный стиль мышления при
написании пролог-программ, а процедурные аспекты
игнорировать в тех пределах, которые
устанавливаются практическими ограничениями.</p>

<h4>Резюме</h4>

<ul>
  <li>Программирование на Прологе состоит в
    определении отношений и в постановке вопросов,
    касающихся этих отношений.</li>
  <li>Программа состоит из предложений. Предложения
    бывают трех типов: <em>факты</em>, <em>правила</em> и <em>вопросы.</em></li>
  <li>Отношение может определяться <em>фактами</em>,
    перечисляющими <em>n</em>-ки объектов, для которых
    это отношение выполняется, или же оно может
    определяться <em>правилами</em>.</li>
  <li><em>Процедура</em> - это множество предложений об
    одном и том же отношении.</li>
  <li><em>Вопросы</em> напоминают запросы к некоторой
    базе данных. Ответ системы на вопрос
    представляет собой множество объектов, которые
    удовлетворяют запросу.</li>
  <li>Процесс, в результате которого пролог-система
    устанавливает, удовлетворяет ли объект запросу,
    часто довольно сложен и включает в себя
    логический вывод, исследование различных
    вариантов и, возможно, <em>возвраты</em>. Все это
    делается автоматически самой пролог-системой и
    по большей части скрыто от пользователя.</li>
  <li>Различают два типа смысла пролог-программ:
    декларативный и процедурный. Декларативный
    подход предпочтительнее с точки зрения
    программирования. Тем не менее, программист
    должен часто учитывать также и процедурные
    детали.</li>
  <li>В данной главе были введены следующие понятия:<br>
    <br>
    &nbsp;&nbsp;&nbsp; предложение, факт, правило, вопрос<br>
    &nbsp;&nbsp;&nbsp; голова предложения, тело предложения<br>
    &nbsp;&nbsp;&nbsp; рекурсивное правило<br>
    &nbsp;&nbsp;&nbsp; рекурсивное определение<br>
    &nbsp;&nbsp;&nbsp; процедура<br>
    &nbsp;&nbsp;&nbsp; атом, переменная<br>
    &nbsp;&nbsp;&nbsp; конкретизация переменной<br>
    &nbsp;&nbsp;&nbsp; цель<br>
    &nbsp;&nbsp;&nbsp; цель достижима, цель успешна<br>
    &nbsp;&nbsp;&nbsp; цель недостижима,<br>
    &nbsp;&nbsp;&nbsp; цель имеет неуспех, цель терпит
    неудачу<br>
    &nbsp;&nbsp;&nbsp; возврат<br>
    &nbsp;&nbsp;&nbsp; декларативный смысл, процедурный
    смысл.</li>
</ul>

<h4>Литература</h4>

<p>Различные реализации Пролога используют
разные синтаксические соглашения. В данной книге
мы применяем так называемый Эдинбургский
синтаксис (его называют также синтаксисом DEC-10,
поскольку он принят в известной реализации
Пролога для машины DEC-10; см. Pereira и др. 1978), он
используется во многих популярных
пролог-системах, таких как Quintus Prolog, Poplog, CProlog, Arity/
Prolog, Prolog-2 и т.д.</p>

<p>Bowen D. L. (1981). <em>DECsystem-10 Prolog User's Manual.</em> University of
Edinburgh: Department of Artificial Intelligence.</p>

<p>Mellish С. and Hardy S. (1984). <em>Integrating Prolog in the POPLOG environment.
Implementations of Prolog (J. A. Campbell, ed.).</em> Ellis Horwood.</p>

<p>Pereira F. (1982). <em>C-Prolog User's Manual.</em> University of Edinburgh: Department
of Computer-Aided Architectural Design.</p>

<p>Pereira L. M., Pereira F., Warren D. H. D. (1978). <em>User's Guide to DECsystem-10
Prolog.</em> University of Edinburgh: Department of Artificial Intelligence.</p>

<p><em>Quintus Prolog User's Guide and Reference Manual.</em> Palo Alto: Quintus Computer
System Inc. (1985).</p>

<p><em>The Arity/Prolog Programming Language.</em> Concord, Massachusetts: Arity
Corporation (1986).</p>

<hr>
</a>

<p align="center"><a href="ch1_4.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch2_1.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
