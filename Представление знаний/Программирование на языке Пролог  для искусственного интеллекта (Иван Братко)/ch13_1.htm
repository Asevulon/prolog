<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 13. Пункт 1</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch12_3.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch13_2.htm">Вперёд</a></p>

<hr>

<h3 align="center">Глава 13</h3>

<h3 align="center">СВЕДЕНИЕ ЗАДАЧ К ПОДЗАДАЧАМ.<br>
И / ИЛИ-<a name="tn91">ГРАФЫ</h3>

<p><span id="t91">Представление в виде И / ИЛИ-графов</span>
наиболее хорошо приспособлено для задач, которые
естественным образом разбиваются на взаимно
независимые подзадачи. Примерами таких задач
могут служить поиск маршрута, символическое
интегрирование, а также игровые задачи,
доказательство теорем и т.п. В этой главе мы
разработаем программы для поиска в И / ИЛИ-графах,
в том числе программу поиска с предпочтением,
управляемого эвристиками.</p>
</a><a name="p13_1"><script language="JavaScript">double_line();</script>
</a>

<h4>13. 1.&nbsp;&nbsp;&nbsp; Представление задач в виде И /
ИЛИ-графов</h4>

<p>В главах 11 и 12, говоря о решении задач, мы
сконцентрировали свое внимание на пространстве
состояний как средстве представления этих задач.
В соответствии с таким подходом решение задач
сводилось к поиску пути в графе пространства
состояний. Однако для некоторых категорий задач
представление<a name="tn264"> в форме И / ИЛИ-графа</a>
является более естественным. Такое
представление основано на <span id="t264">разбиении
задач на подзадачи</span>. Разбиение на подзадачи
дает преимущества в том случае, когда подзадачи
взаимно независимы, а, следовательно, и решать их
можно независимо друг от друга.</p>

<p>Проиллюстрируем это на примере. Рассмотрим
задачу отыскания на карте дорог маршрута между
двумя заданными городами, как показано на рис. 13.1.
Не будем пока учитывать длину путей. Разумеется,
эту задачу можно сформулировать как поиск пути в
про-</p>

<p align="center"><img src="pic/fig13_1.gif" width="348" height="330"
alt="fig13_1.gif (2841 bytes)"></p>

<p align="center"><small><strong>Рис. 13. 1.</strong>&nbsp; Поиск маршрута
из&nbsp; <em>а</em>&nbsp; в&nbsp; <em>z</em>&nbsp; на карте дорог.
Через реку</small><br>
<small>можно переправиться в городах&nbsp; <em>f</em>&nbsp; и
&nbsp; <em>g</em>.&nbsp; И / ИЛИ-представление этой</small><br>
<small>задачи показано на рис. 13.2.</small></p>

<p>странстве состояний. Соответствующее
пространство состояний выглядело бы в точности,
как карта рис. 13.1: вершины соответствуют городам,
дуги - непосредственным связям между городами.
Тем не менее давайте построим другое
представление, основанное на естественном
разбиении этой задачи на подзадачи.</p>

<p>На карте рис. 13.1 мы видим также реку. Допустим,
что переправиться через нее можно только по двум
мостам: один расположен в городе&nbsp; <em>f</em>, &nbsp;
другой - в городе&nbsp; <em>g</em>.&nbsp; Очевидно, что
искомый маршрут обязательно должен проходить
через один из мостов, а значит, он должен пройти
либо через&nbsp; <em>f</em>,&nbsp; либо через&nbsp; <em>g</em>. &nbsp;
Таким образом, мы имеем две главных альтернативы:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Для того, чтобы найти
путь из&nbsp; <em>а</em>&nbsp; в&nbsp; <em>z</em>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; необходимо найти <em>одно
из двух</em>:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; путь из&nbsp; <em>а</em>&nbsp; в&nbsp; <em>z</em>,
&nbsp; проходящий через&nbsp; <em>f</em>,&nbsp; или<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
путь из&nbsp; <em>а</em>&nbsp; в&nbsp; <em>z</em>, &nbsp; проходящий
через&nbsp; <em>g</em>.</p>

<p align="center"><img src="pic/fig13_2.gif" width="398" height="280"
alt="fig13_2.gif (2283 bytes)"></p>

<p align="center"><small><strong>Рис. 13. 2.</strong>&nbsp; <a name="tn221"><span
id="t221">И / ИЛИ-представление задачи поиска
маршрута</span> рис. 13.1.</small><br>
<small>Вершины соответствуют задачам или
подзадачам, полукруглые дуги</small><br>
<small>означают, что все (точнее, обе) подзадачи
должны быть решены.</small></p>

<p>Теперь каждую из этих двух альтернативных
задач можно, в свою очередь, разбить следующим
образом:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Для того, чтобы найти путь
из&nbsp; <em>a</em>&nbsp; в&nbsp; <em>z</em>&nbsp; через<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<em>f</em>, &nbsp; необходимо:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1.1 найти путь из&nbsp; <em>а</em>&nbsp; и&nbsp; <em>f</em>&nbsp;&nbsp; <em>и</em><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1.2 найти путь из&nbsp; <em>f</em>&nbsp; в&nbsp; <em>z</em>.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Для того, чтобы найти путь
из&nbsp; <em>a</em>&nbsp; в&nbsp; <em>z</em>&nbsp; через<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<em>g</em>, &nbsp; необходимо:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2.1 найти путь из&nbsp; <em>а</em>&nbsp; в&nbsp; <em>g</em>&nbsp;&nbsp; <em>и</em><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2.2 найти путь из&nbsp; <em>g</em>&nbsp; в&nbsp; <em>z</em>.</p>

<p align="center"><img src="pic/fig13_3.gif" width="481" height="141"
alt="fig13_3.gif (1595 bytes)"></p>

<p align="center"><small><strong>Рис. 13. 3.</strong>&nbsp; (а)&nbsp; Решить
&nbsp; Р&nbsp; -&nbsp; это значит решить&nbsp; Р<sub>1</sub>&nbsp; или
&nbsp; Р<sub>2</sub>&nbsp; или&nbsp; ...<br>
(б)&nbsp; Решить&nbsp; Q&nbsp; -&nbsp; это значит решить все:
&nbsp; Q<sub>1</sub>&nbsp; и&nbsp; Q<sub>2</sub>&nbsp; и&nbsp; ... .</small></p>

<p>Итак, мы имеем две главных альтернативы для
решения исходной задачи:&nbsp; (1)&nbsp; путь через&nbsp; <em>f</em>
&nbsp; или&nbsp; (2)&nbsp; путь через&nbsp; <em>g</em>.&nbsp; Далее,
каждую из этих альтернатив можно <em>разбить на
подзадачи</em> (1.1 и 1.2 или 2.1 и 2.2 соответственно).
Здесь важно то обстоятельство, что каждую из
подзадач в обоих альтернативах можно решать
независимо от другой. Полученное разбиение
исходной задачи можно изобразить в форме <em>И /
ИЛИ-графа</em> (рис. 13.2). Обратите внимание на
полукруглые дуги, которые указывают на отношение
&nbsp; И&nbsp; между соответствующими подзадачами.
Граф, показанный на рис. 13.2 - это всего лишь
верхняя часть всего&nbsp; И / ИЛИ-дерева. &nbsp;
Дальнейшее разбиение подзадач можно было бы
строить на основе введения дополнительных
промежуточных городов.</p>

<p>Какие вершины&nbsp; И / ИЛИ-графа&nbsp; являются
целевыми? Целевые вершины - это тривиальные, или
&quot;примитивные&quot; задачи. В нашем примере такой
подзадачей можно было бы считать подзадачу
&quot;найти путь из&nbsp; <em>а</em>&nbsp; в&nbsp; <em>с</em>&quot;, &nbsp;
поскольку между городами&nbsp; <em>а</em>&nbsp; и&nbsp; <em>с</em>
&nbsp; на карте имеется непосредственная связь</a><a
name="tn92">.</p>

<p>Рассматривая наш пример, мы ввели ряд важных
понятий. <span id="t92">И / ИЛИ-граф</span> - это
направленный граф, вершины которого
соответствуют задачам, а дуги - отношениям между
задачами. Между дугами также существуют свои
отношения. Это отношения И и ИЛИ, в зависимости от
того, должны ли мы решить только одну из
задач-преемников или же несколко из них (см. рис.
13.3). В принципе из вершины могут выходить дуги,
находящиеся в отношении И вместе с дугами,
находящимися в отношении ИЛИ. Тем не менее, мы
будем предполагать, что каждая вершина имеет
либо только И-преемников, либо только
ИЛИ-преемников; дело в том, что в такую форму
можно преобразовать любой И / ИЛИ граф, вводя в
него при необходимости вспомогательные</a><a
name="tn125"> ИЛИ-вершины.</a><a name="tn141"> Вершину, из
которой выходят только И-дуги, называют <span id="t125">И-вершиной</span>;
вершину, из которой выходят только ИЛИ-дуги, - <span
id="t141">ИЛИ-вершиной</span>. </p>

<p>Когда задача представлялась в форме
пространства состояний, ее решением был путь в
этом пространстве. Что является решением в
случае И / ИЛИ-представления? Решение должно,
конечно, включать в себя все</a><a name="tn110"> подзадачи
И-вершины. Следовательно, это уже не путь, а
дерево. Такое <span id="t110">решающее дерево Т</span>
определяется следующим образом: 

<ul>
  <li>исходная задача Р - это корень дерева Т;</li>
  <li>если Р является ИЛИ-вершиной, то в Т содержится
    только один из ее преемников (из И / ИЛИ-графа)
    вместе со своим собственным решающим деревом;</li>
  <li>если Р - это И-вершина, то все ее преемники (из И /
    ИЛИ-графа) вместе со своими решающими деревьями
    содержатся в Т.</li>
</ul>

<p align="center"><img src="pic/fig13_4.gif" width="449" height="499"
alt="fig13_4.gif (3799 bytes)"></p>
</a>

<p align="center"><a name="tn111"><small><strong>Рис. 13. 4.</strong>&nbsp; (а)&nbsp;
Пример И / ИЛИ-графа:&nbsp; <em>d</em>,&nbsp; <em>g</em>&nbsp; и&nbsp; <em>h</em>&nbsp;
- &nbsp; целевые вершины;<br>
<em>a</em>&nbsp; -&nbsp; исходная задача.&nbsp; (b)&nbsp;&nbsp; и &nbsp;
(с)&nbsp; <span id="t111">Два решающих дерева</span>, стоимости<br>
которых равны&nbsp; 9&nbsp; и&nbsp; 8&nbsp; соответственно.
Здесь стоимость решающего<br>
дерева определена как сумма стоимостей всех
входящих в него дуг.</small></p>

<p>Иллюстрацией к этому определению может служить
рис. 13.4. Используя стоимости, мы можем
формулировать критерии оптимальности решения.
Например, можно определить стоимость решающего
графа как сумму стоимостей всех входящих в него
дуг. Тогда, поскольку обычно мы заинтересованы в
минимизации стоимости, мы отдадим предпочтение
решающему графу, изображенному на рис. 13.4(с).</p>

<p>Однако мы не обязательно должны измерять
степень оптимальности решения, базируясь на
стоимостях дуг. Иногда более естественным
окажется приписывать стоимость не дугам, а
вершинам, или же и тем, и другим одновременно.</p>

<p>Подведем итоги: 

<ul>
  <li>И / ИЛИ-представление основано на философии
    сведения задач к подзадачам.</li>
  <li>Вершины И / ИЛИ-графа соответствуют задачам;
    связи между вершинами - отношениям между
    задачами.</li>
  <li>Вершина, из которой выходят ИЛИ-связи,
    называется ИЛИ-вершиной. Для того, чтобы решить
    соответствующую задачу, нужно решить одну из ее
    задач-преемников.</li>
  <li>Вершина, из которой выходят И-связи, называ ется
    И-вершиной. Для того, чтобы решить
    соответствующую задачу, нужно решить все ее
    задачи-преемники.</li>
  <li>При заданном И / ИЛИ-графе конкретная задача
    специфицируется заданием<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; стартовой вершины и<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; целевого условия для
    распознавания<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; целевых вершин.<br>
  </li>
  <li><em>Целевые вершины</em> (или &quot;терминальные
    вершины&quot;) соответствуют тривиальным (или
    &quot;примитивным&quot;) задачам.</li>
  <li>Решение представляется в виде <em>решающего
    графа</em> - подграфа всего И / ИЛИ-графа.</li>
  <li>Представление задач в форме пространства
    состояний можно рассматривать как специальный
    частный случай И / ИЛИ-представления, когда все
    вершины И / ИЛИ-графа являются ИЛИ-вершинами.</li>
  <li>И / ИЛИ-представление имеет преимущество в том
    случае, когда вершинами, находящимися в
    отношении И, представлены подзадачи, которые
    можно решать независимо друг от друга. Критерий
    независимости можно несколько ослабить, а именно
    потребовать, чтобы существовал такой порядок
    решения И-задач, при котором решение более
    &quot;ранних&quot; подзадач не разрушалось бы при
    решении более &quot;поздних&quot; под задач.</li>
  <li>Дугам или вершинам, или и тем, и другим можно
    приписать стоимости с целью получить
    возможность сформулировать критерий
    оптимальности решения.</li>
</ul>

<hr>
</a>

<p align="center"><a href="ch12_3.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch13_2.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
