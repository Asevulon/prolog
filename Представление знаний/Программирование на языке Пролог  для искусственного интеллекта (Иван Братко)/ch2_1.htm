<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 2. Пункт 1</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch1_5.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch2_2.htm">Вперёд</a></p>

<hr>

<h3 align="center">Глава 2</h3>

<h3 align="center">СИНТАКСИС И СЕМАНТИКА ПРОЛОГ ПРОГРАММ</h3>

<p>В данной главе дается систематическое
изложение синтаксиса и семантики основных
понятий Пролога, а также вводятся структурные
объекты данных. Рассматриваются следующие темы: 

<ul>
  <li>простые объекты данных (атомы, числа,
    переменные)</li>
  <li>структурные объекты</li>
  <li>сопоставление как основная операция над
    объектами</li>
  <li>декларативная (или непроцедурная) семантика
    программ</li>
  <li>взаимосвязь между декларативным и процедурным
    смыслами программ</li>
  <li>изменение процедурного смысла путем изменения
    порядка следования предложений и целей</li>
</ul>

<p>Большая часть этих тем уже была затронута в гл.
1. Теперь их изложение будет более формальным и
детализированным.</p>
<a name="p2_1"><script language="JavaScript">double_line();</script>
</a>

<h4>2. 1.&nbsp;&nbsp;&nbsp; Объекты <a name="tn178">данных</h4>

<p>На рис. 2.1 приведена <span id="t178">классификация
объектов данных Пролога</span>. Пролог-система
распознает тип объекта по его синтаксической
форме в тексте программы. Это возможно благодаря
тому, что синтаксис Пролога</p>

<p align="center"><img src="pic/fig2_1.gif" width="351" height="253"
alt="fig2_1.gif (1382 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 1.</strong>&nbsp; Обьекты данных
Пролога.</small> </p>

<p>предписывает различные формы записи для
различных типов объектов данных. В гл. 1 мы уже
видели способ, с помощью которого можно отличить</a><a
name="tn16"> атомы от переменных: переменные
начинаются с прописной буквы, тогда как <span id="t16">атомы
- со строчной</span>. Для того, чтобы пролог-система
распознала тип объекта, ей не требуется сообщать
больше никакой дополнительной информации (такой,
например, как объявление типа данных).</p>
</a><a name="p2_1_1">

<hr>
</a>

<h4>2. 1. 1.&nbsp;&nbsp;&nbsp; Атомы и числа</h4>

<p>В гл. 1 мы уже видели несколько простых примеров
атомов и переменных. Вообще же они могут
принимать более сложные формы, а именно
представлять собой цепочки следующих символов: 

<ul>
  <li>прописные буквы А, В, ..., Z</li>
  <li>строчные буквы а, b, ..., z</li>
  <li>цифры 0, 1, 2, ..., 9</li>
  <li>специальные символы, такие как<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; -&nbsp; *&nbsp; / &nbsp; =&nbsp;
    :&nbsp; .&nbsp; &amp;&nbsp; _&nbsp; ~</li>
</ul>

<p>Атомы можно создавать тремя способами:</p>

<p>(1)&nbsp;&nbsp;&nbsp; из цепочки букв, цифр и символа
подчеркивания _, начиная такую цепочку со
строчной буквы:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> анна<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nil<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; х25<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; х_25<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; х_25AB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; х_<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; х__у<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; альфа_бета_процедура<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; мисс_Джонс<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; сара_джонс</strong></p>

<p>(2)&nbsp;&nbsp;&nbsp; из специальных символов:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> &lt;---&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ======&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; . <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : : =</strong></p>

<p>Пользуясь атомами такой формы, следует
соблюдать некоторую осторожность, поскольку
часть цепочек специальных символов имеют в
Прологе заранее определенный смысл. Примером
может служить <strong>:-</strong>&nbsp; .</p>

<p>(3)&nbsp;&nbsp;&nbsp; из цепочки символов, заключенной в
одинарные кавычки. Это удобно, если мы хотим,
например, иметь атом, начинающийся с прописной
буквы. Заключая его в кавычки, мы делаем его
отличным от переменной:</p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Том'<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Южная_Америка'<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a name="tn338">'Сара Джонс'</strong></p>

<p><span id="t338">Числа в Прологе</span> бывают целыми и
вещественными. Синтаксис целых чисел прост, как
это видно из следующих примеров: 1, 1313, 0, -97. Не все
целые числа могут быть представлены в машине,
поэтому диапазон целых чисел ограничен
интервалом между некоторыми минимальным и
максимальным числами, определяемыми конкретной
реализацией Пролога. Обычно реализация
допускает диапазон хотя бы от -16 383 до 16 383, а часто,
и значительно более широкий.</p>

<p>Синтаксис вещественных чисел зависит от
реализации. Мы будем придерживаться простых
правил, видных из следующих примеров: 3.14, -0.0035, 100.2.
При обычном программировании на Прологе
вещественные числа используются редко. Причина
этого кроется в том, что Пролог - это язык,
предназначенный в первую очередь для обработки
символьной, а не числовой информации, в
противоположность языкам типа Фортрана,
ориентированным на числовую обработку. При
символьной обработке часто используются целые
числа, например, для подсчета количества
элементов списка; нужда же в вещественных числах
невелика.</p>

<p>Кроме отсутствия необходимости в
использовании вещественных чисел в обычных
применениях Пролога, существует и другая причина
избегать их. Мы всегда стремимся поддерживать
наши программы в таком виде, чтобы их смысл был
предельно ясен. Введение вещественных чисел в
некоторой степени нарушает эту ясность из-за
ошибок вычислений, связанных с округлением во
время выполнения арифметических действий.
Например, результатом вычисления выражения 10000 +
0.0001 - 10000 может оказаться 0 вместо правильного
значения 0.0001.</p>
</a><a name="p2_1_2">

<hr>
</a>

<h4>2. 1. 2.&nbsp;&nbsp;&nbsp; <a name="tn208">Переменные</h4>

<p><span id="t208">Переменные</span> - это цепочки, состоящие
из букв, цифр и символов подчеркивания. Они
начинаются с прописной буквы или с символа
подчеркивания:</p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Х<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Результат<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Объект2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Список_участников<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; СписокПокупок<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _х23<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _23</strong></p>

<p>Если переменная встречается в предложения
только один </a><a name="tn8">раз, то нет необходимости
изобретать ей имя. Можно использовать так
называемую <span id="t8">&quot;анонимную&quot; переменную</span>,
которая записывается в виде одного символа
подчеркивания. Рассмотрим, например, следующее
правило:</p>

<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; имеетребенка( X) :-
родитель( X, Y).</h4>

<p>Это правило гласит: &quot;Для всех X,&nbsp; Х имеет
ребенка, если X является родителем некоторого
Y&quot;. Здесь мы определяем свойство <strong>имеетребенка</strong>
таким образом, что оно не зависит от имени
ребенка. Следовательно, это как раз тот случай,
когда уместно использовать анонимную
переменную. Поэтому вышеприведенное правило
можно переписать так:</p>

<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; имеетребенка( X) :-
родитель( X, _ ).</h4>

<p>Всякий раз, когда в предложения появляется
одиночный символ подчеркивания, он обозначает
новую анонимную переменную. Например, можно
сказать, что существует некто, кто имеет ребенка,
если существуют два объекта, такие, что один из
них является родителем другого:</p>

<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; некто_имеет_ребенка :-
родитель( _, _ ).</h4>

<p>Это предложение эквивалентно следующему:</p>

<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; некто_имеет_ребенка :-
родитель( X, Y).</h4>

<p>Однако оно имеет совершенно другой смысл,
нежели</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> некто_имеет_ребенка :-
родитель( X, X).</strong></p>

<p>Если анонимная переменная встречается в
вопросе, то ее значение не выводится при ответе
системы на этот вопрос. Если нас интересуют люди,
имеющие детей, но не имена этих детей, мы можем
просто спросить:</p>

<h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ?-&nbsp; родитель( X, _ ).</h4>

<p>Лексический диапазон имени - одно предложение.
Это значит, что если, например, имя Х15 встречается
в двух предложениях, то оно обозначает две разные
переменные. Однако внутри одного предложения
каждое его появлений обозначает одну и ту же
переменную. Для констант ситуация другая: один и
тот же атом обозначает один и тот же объект в
любом предложении, иначе говоря, - во всей
программе.</p>
</a><a name="p2_1_3">

<hr>
</a>

<h4>2. <a name="tn308">1. </a><a name="tn309">3.&nbsp;&nbsp;&nbsp; Структуры</h4>

<p><span id="t308">Структурные объекты</span> (или просто <span
id="t309">структуры</span>) - это объекты, которые
состоят из нескольких компонент. Эти компоненты,
в свою очередь, могут быть структурами. Например,
дату можно рассматривать как структуру,
состоящую из трех компонент: день, месяц, год.
Хотя они и составлены из нескольких компонент,
структуры в программе ведут себя как единые</a><a
name="tn324"> объекты. Для того, чтобы объединить
компоненты в структуру, требуется выбрать <em><span
id="t324">функтор</span></em>. Для нашего примера подойдет
функтор <strong>дата</strong>. Тогда дату 1-е мая 1983 г.
можно записать так:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> дата( 1, май, 1983)</strong></p>

<p>(см. рис. 2.2).</p>

<p>Все компоненты в данном примере являются
константами (две компоненты - целые числа и одна -
атом). Компоненты могут быть также переменными
или структурами. Произвольный день в мае можно
представить структурой:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> дата( День, май, 1983)</strong></p>

<p>Заметим, что <strong>День</strong> является переменной
и ей можно приписать произвольное значение на
некотором более позднем этапе вычислений.</p>

<p>Такой метод структурирования данных прост и
эффективен. Это является одной из причин того,
почему Пролог естественно использовать для
решения задач обработки символьной информации</a><a
name="tn313">.</p>

<p>Синтаксически все объекты данных в Прологе
представляют собой <em><span id="t313">термы</span></em>.
Например,</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> май</strong></p>

<p>и</p>
</a>

<p><a name="tn313">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> дата( 1, май,
1983)</strong></p>

<p>суть термы.</p>

<p>Все структурные объекты можно изображать в
виде деревьев (пример см. на рис. 2.2). Корнем дерева
служит функтор, ветвями, выходящими из него, -
компоненты. Если некоторая компонента тоже
является структурой, тогда ей соответствует
поддерево в дереве, изображающем весь
структурный объект.</p>

<p>Наш следующий пример показывает, как можно
использовать структуры для представления
геометрических объектов (см. рис. 2.3). Точка в
двумерном пространстве определяется двумя
координатами; отрезок определяется двумя
точками, а треугольник можно задать тремя
точками. Введем следующие функторы:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> точка</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
для точек<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> отрезок</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
для отрезков и<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> треугольник</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
для треугольников.</p>

<p align="center"><img src="pic/fig2_2.gif" width="395" height="140"
alt="fig2_2.gif (1306 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 2.</strong>&nbsp; Дата - пример
структурного объекта:</small><br>
<small>(а)&nbsp;&nbsp;&nbsp; его представление в виде дерева;
&nbsp;&nbsp;&nbsp; (б)&nbsp;&nbsp;&nbsp; запись на Прологе.</small></p>

<p>Тогда объекты, приведенные на рис. 2.3, можно
представить следующими прологовскими термами:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> Р1 = точка( 1, 1)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P2 = точка( 2, 3)</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S =
отрезок( P1, P2) =<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; отрезок( точка( 1, 1), точка( 2, 3) )</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Т =
треугольник( точка( 4, 2), точка( 6, 4),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
точка( 7, 1) )</strong></p>

<p align="center"><img src="pic/fig2_3.gif" width="327" height="221"
alt="fig2_3.gif (1569 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 3.</strong>&nbsp; Простые
геометрические объекты.</small></p>

<p align="left">Соответствующее представление этих
объектов в виде деревьев приводится на рис. 2.4.
Функтор, служащий</p>

<p align="center"><img src="pic/fig2_4.gif" width="423" height="390"
alt="fig2_4.gif (2517 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 4.</strong>&nbsp; Представление
объектов с рис. 2.3&nbsp; в виде деревьев</a><a name="tn86">.</small></p>

<p>корнем дерева, называется <em><span id="t86">главным
функтором</span></em> терма.</p>

<p>Если бы в такой же программе фигурировали точки
трехмерного пространства, то можно было бы для их
представления использовать другой функтор,
скажем <strong>точка3</strong>:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> точка3( X, Y, Z)</strong></p>

<p>Можно, однако, воспользоваться одним и тем же
именем <strong>точка</strong> одновременно и для точек
двумерного и трехмерного пространств и написать,
например, так:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> точка( XI, Y1)&nbsp; </strong> и<strong>
&nbsp; точка ( X, Y, Z)</strong></p>

<p>Если одно и то же имя появляется в программе в
двух различных смыслах, как в вышеупомянутом
примере с точкой, то пролог-система будет
различать их по числу аргументов и
интерпретировать это имя как два функтора: один -
двухаргументный; второй - трех. Это возможно
потому, что каждый функтор определяется двумя
параметрами:</p>

<p>(1)&nbsp;&nbsp;&nbsp; именем, синтаксис которого
совпадает с синтаксисом </a><a name="tn12">атомов;</p>

<p>(2)&nbsp;&nbsp;&nbsp; <em><span id="t12">арностью</span></em> - т. е.
числом аргументов.</p>

<p>Как уже объяснялось, все структурные объекты в
Прологе - это деревья, представленные в программе
термами. Рассмотрим еще два примера, чтобы
показать, насколько удобно сложные объекты
данных представляются с помощью прологовских
термов. На рис. 2.5 показана древовидная структура,
соответствующая арифметическому выражению</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em> (а + в)*(с - 5)</em></p>

<p>В соответствии с введенным к настоящему
моменту синтаксисом, такое выражение, используя
символы *,&nbsp; +&nbsp; и&nbsp; -&nbsp; в качестве функторов,
можно записать следующим образом:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> *( +( а, в), -( с, 5) )</strong></p>

<p align="center"><img src="pic/fig2_5.gif" width="293" height="157"
alt="fig2_5.gif (728 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 5.</strong>&nbsp; Древовидная
структура, соответствующая арифметическому</small><br>
<small>выражению <em> (а + w)*(s - 5)</em>.</small></p>

<p>Это, конечно, совершенно правильный
прологовский терм, однако это не та форма,
которую нам хотелось бы иметь, при записи
арифметических выражений. Хотелось бы применять
обычную инфиксную запись, принятую в математике.
На самом деле Пролог допускает использование
инфиксной нотации, при которой символы *,&nbsp; + &nbsp;
и&nbsp; -&nbsp; записываются как инфиксные операторы.
Детали того, как программист может определять
свои собственные операторы, мы приведем в гл. 3.</p>

<p>В качестве последнего примера рассмотрим
некоторые простые электрические цепи,
изображенные на рис. 2.6. В правой части рисунка
помещены древовидные представления этих цепей.
Атомы <strong>r1</strong>, <strong>r2</strong>, <strong>r3</strong> и <strong>r4</strong>
- имена резисторов. Функторы <strong>пар</strong> и <strong>посл</strong>
обозначают соответственно параллельное и
последовательное соединение резисторов. Вот
соответствующие прологовские термы:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong> посл( r1, r2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; пар( r1, r2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; паp( rl, пap( r2, r3) )<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; пар( r1, посл( пар( r2, r3), r4) )</strong></a></p>
<a name="tn12">

<p><strong>&nbsp;</strong></p>

<p align="center"><img src="pic/fig2_6.gif" width="427" height="736"
alt="fig2_6.gif (3887 bytes)"></p>

<p align="center"><small><strong>Рис. 2. 6.</strong>&nbsp; Некоторые
простые электрические цепи и их представление:
(а) последовательное соединение резисторов rl и r2;
(b) параллельное соединение двух резисторов; (с)
параллельное соединение трех резисторов; (d)
параллельное соединение r1 и еще одной цепи.</small></p>

<h4>Упражнения</h4>

<p><strong>2. 1.</strong>&nbsp;&nbsp;&nbsp; Какие из следующих
выражений представляют собой правильные объекты
в смысле Пролога? Что это за объекты (атомы, числа,
переменные, структуры)?</p>

<p>&nbsp;&nbsp;&nbsp; (а)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Диана</strong><br>
&nbsp;&nbsp;&nbsp; (b)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>диана</strong><br>
&nbsp;&nbsp;&nbsp; (с)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>'Диана'</strong><br>
&nbsp;&nbsp;&nbsp; (d)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>_диана</strong><br>
&nbsp;&nbsp;&nbsp; (e)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>'Диана
едет на юг'</strong><br>
&nbsp;&nbsp;&nbsp; (f)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>едет(
диана, юг)</strong><br>
&nbsp;&nbsp;&nbsp; (g)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>45</strong><br>
&nbsp;&nbsp;&nbsp; (h)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>5( X, Y)</strong><br>
&nbsp;&nbsp;&nbsp; (i)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>+( север,
запад)</strong><br>
&nbsp;&nbsp;&nbsp; (j)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>три(
Черные( Кошки) )</strong></p>
</a>

<p><a href="javascript:fa('2_1')">Посмотреть ответ</a></p>

<p><strong>2. 2.</strong>&nbsp;&nbsp;&nbsp; Предложите
представление для прямоугольников, квадратов и
окружностей в виде структурных объектов Пролога.
Используйте подход, аналогичный приведенному на
рис. 2.4. Например, прямоугольник можно
представить четырьмя точками (а может быть,
только тремя точками). Напишите несколько термов
конкретных объектов такого типа с
использованием предложенного вами
представления.</p>

<hr>

<p align="center"><a href="ch1_5.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch2_2.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
