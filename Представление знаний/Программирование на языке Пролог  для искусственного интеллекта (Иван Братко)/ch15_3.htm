<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 15. Пункт 3</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch15_2.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch15_4.htm">Вперёд</a></p>
<a name="tn5"><script language="JavaScript">double_line();</script>


<h4>15. 3.&nbsp;&nbsp;&nbsp; <span id="t5">Альфа-бета алгоритм</span>:
эффективная реализация минимаксного принципа</h4>

<p>Программа, показанная на рис. 15.3, производит
просмотр в глубину дерева поиска, систематически
обходя <em>все</em> содержащиеся в нем позиции
вплоть до терминальных; она вычисляет
статические оценки <em>всех</em> терминальных
позиций. Как правило, для того, чтобы получить
правильную минимаксную оценку корневой вершины,
совсем не обязательно проделывать эту работу
полностью. Поэтому алгоритм поиска можно сделать
более экономным. Его можно усовершенствовать,
используя следующую идею. Предположим, что у нас
есть два варианта хода. Как только мы узнали, что
один из них явно хуже другого, мы можем принять
правильное решение, не выясняя, на сколько <em>в
точности</em> он хуже. Давайте используем этот
принцип для сокращения дерева поиска рис. 15.2.
Процесс поиска протекает следующим образом:</p>

<p>&nbsp;&nbsp;&nbsp; (1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Начинаем с
позиции&nbsp; <em>а</em>.</p>

<p>&nbsp;&nbsp;&nbsp; (2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Переходим к
&nbsp; <em>b</em>.</p>

<p>&nbsp;&nbsp;&nbsp; (3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Переходим к
&nbsp; <em>d</em>.</p>

<p>&nbsp;&nbsp;&nbsp; (4)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Берем
максимальную из оценок преемников позиции&nbsp; <em>d</em>,
&nbsp; получаем&nbsp; <em>V( d) =</em> 4.</p>

<p>&nbsp;&nbsp;&nbsp; (5) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Возвращаемся к&nbsp; <em>b</em> &nbsp; и переходим к&nbsp; <em>е</em>.</p>

<p>&nbsp;&nbsp;&nbsp; (6) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Рассматриваем первого преемника позиции&nbsp; <em>е</em>&nbsp;
с оценкой 5. В этот момент МАКС (который как раз и
должен ходить в позиции&nbsp; <em>е</em>)&nbsp;
обнаруживает, что ему гарантирована в позиции&nbsp;
<em>е</em>&nbsp; оценка не меньшая, чем 5, независимо от
оценок других (возможно, более предпочтительных)
вариантов хода. Этого вполне достаточно для того,
чтобы МИН, даже не зная точной оценки позиции&nbsp; <em>е</em>,
&nbsp; понял, что для него в позиции&nbsp; <em>b</em>&nbsp; ход
в&nbsp; <em>е</em>&nbsp; хуже, чем ход в&nbsp; <em>d</em>.</p>

<p>На основании приведенного выше рассуждения мы
можем пренебречь вторым преемником позиции&nbsp; <em>е</em>
&nbsp; и приписать&nbsp; <em>е&nbsp; приближенную</em> оценку
5. Приближенный характер этой оценки не окажет
никакого влияния на оценку позиции&nbsp; <em>b</em>, &nbsp;
а следовательно, и позиции&nbsp; <em>а</em>.</p>

<p>На этой идее основан знаменитый <em>альфа-бета
алгоритм</em>, предназначенный для эффективной
реализации минимаксного принципа. На рис. 15.4
показан результат работы альфа-бета алгоритма,
примененного к нашему дереву рис. 15.2. Из рис. 15.4
видно, что некоторые из рабочих оценок стали
приближенными. Однако этих приближенных оценок
оказалось достаточно для того, чтобы определить
точную оценку корневой позиции. Сложность поиска
уменьшилась до пяти обращений к оценочной
функции по сравнению с восемью обращениями (в
первоначальном дереве поиска рис. 15.2).</p>

<p>Как уже говорилось раньше, ключевая идея
альфа-бета отсечения состоит в том, чтобы найти
ход не обязательно лучший, но &quot;достаточно
хороший&quot; для того, чтобы принять правильное
решение. Эту идею можно формализовать, введя два
граничных значения, обычно обозначаемых через <em>Альфа</em>
и <em>Бета</em>, между которыми должна заключаться
рабочая оценка позиции. Смысл этих граничных
значений таков: <em>Альфа</em> -это самое маленькое
значение оценки, которое к настоящему моменту
уже гарантировано для игрока МАКС; <em>Бета</em> - это
самое большое значение оценки, на которое МАКС
пока еще может надеяться. Разумеется, с точки
зрения МИН'а, <em>Бета</em> является самым худшим
значением оценки, которое для него уже
гарантировано. Таким образом, действительное
значение оценки (т. е. то, которое нужно найти)
всегда лежит между <em>Альфа</em> и <em>Бета</em>. Если же
стало известно, что оценка некоторой позиции
лежит вне интервала <em>Альфа-Бета</em>, то этого
достаточно для того, чтобы сделать вывод: данная
позиция не входит в основной вариант. При этом
точное значение оценки такой позиции знать не
обязательно, его надо знать только тогда, когда
оценка лежит между <em>Альфа</em> и <em>Бета</em>.
&quot;Достаточно хорошую&quot; рабочую оценку&nbsp; <em>V(
Р, Альфа, Бета)</em>&nbsp; позиции&nbsp; <em>Р</em>&nbsp; по
отношению к <em>Альфа</em> и <em>Бета</em> можно
определить формально как любое значение,
удовлетворяющее следующим ограничениям:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>V( P, Альфа, Бета) &lt;=
Альфа</em>&nbsp;&nbsp;&nbsp; если&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>V(
P) &lt;= Альфа</em></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>V( P, Альфа, Бета) = V( P)</em>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; если
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>Альфа &lt; V( P) &lt; Бета</em></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>V( P, Альфа, Бета) &gt;=
Бета</em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; если
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>V( P) &gt;= Бета</em></p>

<p align="center"><img src="pic/fig15_4.gif" width="532" height="234"
alt="fig15_4.gif (2489 bytes)"></p>

<p align="center"><small><strong>Рис. 15. 4.</strong>&nbsp; Дерево рис. 15.2
после применения альфа-бета алгоритма.<br>
Пунктиром показаны ветви, отсеченные альфа-бета
алгоритмом<br>
для экономии времени поиска. В результате
некоторые из<br>
рабочих оценок стали приближенными (вершины&nbsp; <em>c</em>,
&nbsp; <em>е</em>,&nbsp; <em>f</em>;<br>
сравните с рис.15.2). Однако этих приближенных
оценок<br>
достаточно для вычисления точной оценки
корневой<br>
вершины и построения основного варианта.</small></p>

<p>Очевидно, что, умея вычислять &quot;достаточно
хорошую&quot; оценку, мы всегда можем вычислить
точную оценку корневой позиции&nbsp; <em>Р</em>, &nbsp;
установив границы интервала следующим образом:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>V( Р, -бесконечность,
+бесконечность)&nbsp; =&nbsp; V( P)</em></p>

<p>На рис. 15.5 показана реализация альфа-бета
алгоритма в виде программы на Прологе. Здесь
основное отношение -</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>альфабета( Поз,
Альфа, Бета, ХорПоз, Оц)</strong></p>

<p>где <strong>ХорПоз</strong> - преемник позиции <strong>Поз</strong>
с &quot;достаточно хорошей&quot; оценкой <strong>Оц</strong>,
удовлетворяющей всем указанным выше
ограничениям:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Оц</strong> <em>= V( Поз,
Альфа, Бета)</em></p>

<p>Процедура</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>прибл_лучш( СписПоз,
Альфа, Бета, ХорПоз, Оц)</strong></p>

<p>находит достаточно хорошую позицию <strong>ХорПоз</strong>
в списке позиций <strong>СписПоз</strong>; <strong>Оц</strong> -
приближенная (по отношению к <strong>Альфа</strong> и <strong>Бета</strong>)
рабочая оценка позиции <strong>ХорПоз</strong>.</p>

<p>Интервал между <em>Альфа</em> и <em>Бета</em> может
сужаться (но не расширяться!) по мере углубления
поиска, происходящего при рекурсивных
обращениях к альфа-бета процедуре. Отношение</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>нов_границы( Альфа,
Бета, Поз, Оц, НовАльфа, НовБета)</strong></p>

<p>определяет новый интервал <strong>(НовАльфа,
НовБета)</strong>. Он всегда уже, чем старый интервал <strong>(Альфа,
Бета)</strong>, или равен ему. Таким образом, чем
глубже мы оказываемся в дереве поиска, тем
сильнее проявляется тенденция к сжатию
интервала <em>Альфа-Бета</em>, и в результате
оценивание позиций на более глубоких уровнях
происходит в условиях более тесных границ. При
более узких интервалах допускается большая
степень &quot;приблизительности&quot; при вычислении
оценок, а следовательно, происходит больше
отсечений ветвей дерева. Возникает интересный
вопрос: насколько велика экономия, достигаемая
альфа-бета алгоритмом по сравнению с программой
минимаксного полного перебора </a><a name="tn7">рис. 15.3?</p>
</a>

<p><span id="t7">Эффективность альфа-бета процедуры</span>
зависит от порядка, в котором просматриваются
позиции. Всегда лучше первыми рассматривать
самые сильные ходы с каждой из сторон. Легко
показать на примерах, что</p>
<a name="tn6"><script language="JavaScript">line();</script>


<p><small>% <span id="t6">Альфа-бета алгоритм</span></small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>альфабета( Поз,
Альфа, Бета, ХорПоз, Оц) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ходы( Поз, СписПоз),&nbsp; !,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
прибл_лучш( СписПоз, Альфа, Бета, ХорПоз, Оц);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
стат_оц( Поз, Оц).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; прибл_лучш( [Поз |
СписПоз], Альфа, Бета, ХорПоз, ХорОц) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
альфабета( Поз, Альфа, Бета, _, Оц),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
дост_хор( СписПоз, Альфа, Бета, Поз, Оц, ХорПоз,
ХорОц).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; дост_хор( [ ], _, _, Поз,
Оц, Поз, Оц) :-&nbsp; !.</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Больше нет кандидатов</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>дост_хор( _, Альфа,
Бета, Поз, Оц, Поз, Оц) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ход_мина( Поз), Оц &gt; Бета,&nbsp; !;</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Переход через верхнюю границу</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>ход_макса( Поз), Оц &lt; Альфа,&nbsp; !.</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Переход через нижнюю границу</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>дост_хор( СписПоз,
Альфа, Бета, Поз, Оц, ХорПоз, ХорОц) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
нов_границы( Альфа, Бета, Поз, Оц, НовАльфа,
НовБета),</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Уточнить границы</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>прибл_лучш( СписПоз, НовАльфа, НовБета, Поз1,
Оц1),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
выбор( Поз, Оц, Поз1, Оц1, ХорПоз, ХорОц).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; нов_границы( Альфа,
Бета, Поз, Оц, Оц, Бета) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ход_мина( Поз), Оц &gt; Альфа,&nbsp; !.</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Увеличение нижней границы</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>нов_границы( Альфа,
Бета, Поз, Оц, Альфа, Оц) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ход_макса( Поз), Оц &lt; Бета,&nbsp; !.</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Уменьшение верхней границы</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>нов_границы( Альфа,
Бета, _, _, Альфа, Бета).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; выбор( Поз, Оц, Поз1,
Оц1, Поз, Оц) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ход_мина( Поз), Оц &gt; Оц1,&nbsp; !;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ход_макса( Поз), Оц &lt; Оц1,&nbsp; !.</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; выбор( _, _, Поз1, Оц1,
Поз1, Оц1).</strong></p>
<script language="JavaScript">line();</script>


<p align="center"><small><strong>Рис. 15. 5.</strong>&nbsp; Реализация
альфа-бета алгоритма.</small></p>

<p>возможен настолько неудачный порядок
просмотра, что альфа-бета алгоритму придется
пройти через <em>все</em> вершины, которые
просматривались минимаксным алгоритмом полного
перебора. Это означает, что в худшем случае
альфа-бета алгоритм не будет иметь никаких
преимуществ. Однако, если порядок просмотра
окажется удачным, то экономия может быть
значительной. Пусть <em>N</em>&nbsp; -&nbsp; число
терминальных поисковых позиций, для которых
вычислялись статические оценки алгоритмом
минимаксного полного перебора. Было доказано,
что в лучшем случае, когда самые сильные ходы
всегда рассматриваются первыми, альфа-бета
алгоритм вычисляет статические оценки только
для&nbsp; <em>N</em>&nbsp; позиций.</p>

<p>Этот результат имеет один практический аспект,
связанный с проведением турниров игровых
программ. Шахматной программе, участвующей в
турнире, обычно дается некоторое определенное
время для вычисления очередного хода, и
доступная программе глубина поиска зависит от
этого времени. Альфа-бета алгоритм сможет пройти
при поиске <em>вдвое глубже</em> по сравнению с
минимаксным полным перебором, а опыт показывает,
что применение той же оценочной функции, но на
большей глубине приводит к более сильной игре.</p>

<p>Экономию, получаемую за счет применения
альфа-бета алгоритма, можно также выразить в
терминах более эффективного коэффициента
ветвления дерева поиска (т. е. числа ветвей,
исходящих из каждой внутренней вершины). Пусть
игровое дерево имеет единый коэффициент
ветвления, равный&nbsp; <em>b</em>.&nbsp; Благодаря эффекту
отсечения альфа-бета алгоритм просматривает
только некоторые из существующих ветвей и тем
самым уменьшает коэффициент ветвления. В
результате коэффициент&nbsp; <em>b</em>&nbsp; превратится
в&nbsp; <em>b</em>&nbsp; (в лучшем случае). В шахматных
программах, использующих альфа-бета алгоритм,
достигается коэффициент ветвления, равный 6, при
наличии 30 различных вариантов хода в каждой
позиции. Впрочем, на этот результат можно
посмотреть и менее оптимистично: несмотря на
применение альфа-бета алгоритма, после каждого
продвижения вглубь на один полуход число
терминальных поисковых вершин увеличивается
примерно в 6 раз.</p>

<h4>Проект</h4>

<p>Рассмотрите какую-нибудь игру двух лиц
(например, какой-нибудь нетривиальный вариант
крестиков-ноликов). Напишите отношения, задающие
правила этой игры (разрешенные ходы и
терминальные позиции). Предложите статическую
оценочную функцию, пригодную для использования в
игровой программе, основанной на альфа-бета
алгоритме.</p>

<hr>
</a>

<p align="center"><a href="ch15_2.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch15_4.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
