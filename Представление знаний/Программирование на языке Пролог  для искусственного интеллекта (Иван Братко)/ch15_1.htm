<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 15. Пункт 1</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch14_7.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch15_2.htm">Вперёд</a></p>

<hr>

<h3 align="center">Глава 15</h3>

<h3 align="center">ИГРЫ</h3>

<p>В этой главе мы рассмотрим методы
программирования игр двух лиц с полной
информацией (таких, как шахматы). Для игр,
представляющих интерес, деревья возможных
продолжений слишком велики, чтобы можно было
говорить о полном переборе, поэтому необходимы
какие-то другие подходы. Один из таких методов,
основанный на минимаксном принципе, имеет
эффективную реализацию, известную под названием
&quot;альфа-бета алгоритм&quot;. В дополнение к этому
стандартному методу, мы разработаем в этой главе
программу на основе Языка Советов (Advice Language),
который дает возможность вносить в шахматную
программу знания о типовых ситуациях. Этот
довольно подробный пример может послужить еще
одной иллюстрацией того, насколько хорошо Пролог
приспособлен для реализации систем, основанных
на знаниях<a name="tn127">.</p>
</a><a name="p15_1"><script language="JavaScript">double_line();</script>
</a>

<h4>15. 1.&nbsp;&nbsp;&nbsp;<span id="t127"> Игры двух лиц с полной
информацией</span></h4>

<p>Игры, которые мы собираемся обсуждать в данной
главе, относятся к классу так называемых игр двух
лиц с полной информацией. Примерами таких игр
могут служить шахматы, шашки и т.п. В игре
участвуют два игрока, которые ходят по очереди,
причем оба они обладают полной информацией о
текущей игровой ситуации (это определение
исключает большинство карточных игр). Игра
считается оконченной, если достигнута позиция,
являющаяся согласно правилам игры
&quot;терминальной&quot; (конечной), например матовая
позиция в шахматах. Правилами игры также
устанавливается, каков исход игры в этой
терминальной позиции<a name="tn126">.</p>
</a>

<p>Для игр такого рода возможно представление в
виде <span id="t126"><em>дерева игры</em> (или <em>игрового
дерева</em>)</span>. Вершины этого дерева
соответствуют ситуациям, а дуги ходам. Начальная
ситуация игры - это корневая вершина; листьями
дерева представлены терминальные позиции.</p>

<p>В большинстве игр этого типа возможны
следующие исходы: <em>выигрыш</em>, <em>проигрыш</em> и <em>ничья</em>.
Мы будем рассматривать здесь игры, имеющие
только два возможных исхода - <em>выигрыш</em> и <em>проигрыш</em>.
Игры, в которых возможна ничья, можно упрощенно
считать играми с двумя исходами - <em>выигрыш</em> и <em>не-выигрыш</em>.
Двух участников игры мы будем называть
&quot;игроком&quot; и &quot;противником&quot;. &quot;Игрок&quot;
может выиграть в некоторой нетерминальной
позиции с ходом игрока (&quot;позиции игрока&quot;),
если в ней существует <em>какой-нибудь</em>
разрешенный ход, приводящий к выигрышу. С другой
стороны, некоторая нетерминальная позиция с
ходом противника (&quot;позиция противника&quot;)
является выигранной для игрока, если <em>все</em>
разрешенные ходы из этой позиции ведут к
позициям, в которых возможен выигрыш. Эти правила
находятся в полном соответствии с
представлением задач в форме И / ИЛИ-дерева,
которое мы обсуждали в гл. 13.Между понятиями,
относящимися к И / ИЛИ-деревьям, и понятиями,
используемыми в играх, можно установить взаимное
соответствие следующим образом:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; позиции игры
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
вершины, задачи</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; терминальные позиции
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; целевые
вершины,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
выигрыша
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
тривиально решаемые задачи</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; терминальные позиции
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; задачи, не
имеющие решения<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
проигрыша</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; выигранные позиции
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
задачи, имеющие решение</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; позиции игрока
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ИЛИ-вершины</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; позиции противника
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
И-вершины</p>

<p>Очевидно, что аналогичным образом понятия,
относящиеся к поиску в И / ИЛИ-деревьях, можно
переосмыслить в терминах поиска в игровых
деревьях.</p>

<p>Ниже приводится простая программа, которая
определяет, является ли некоторая позиция игрока
выигранной.</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>выигр( Поз) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
терм_выигр( Поз).</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Терминальная выигранная позиция</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>выигр( Поз) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
not терм_проигр( Поз),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ход( Поз, Поз1),</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Разрешенный ход в Поз1</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>not ( ход( Поз1, Поз2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
not выигр( Поз2) ).</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Ни один из ходов противника не ведет к
не-выигрышу</small></p>

<p>Здесь правила игры встроены в предикат <strong>ход(
Поз, Поз1)</strong>, который порождает все разрешенные
ходы, а также в предикаты <strong>терм_выигр( Поз)</strong>
и <strong>терм_проигр( Поз)</strong>, которые распознают
терминальные позиции, являющиеся, согласно
правилам игры, выигранными или проигранными. В
последнем из правил программы, содержащем
двойное отрицание (<strong>not</strong>), говорится: не
существует хода противника, ведущего к не
выигранной позиции. Другими словами: <em>все</em>
ходы противника приводят к позициям, выигранным
с точки зрения игрока.</p>

<p align="center"><img src="pic/fig15_1.gif" width="571" height="248"
alt="fig15_1.gif (3131 bytes)"></p>

<p align="center"><small><strong>Рис. 15. 1.</strong>&nbsp; Сложность
игровых деревьев в шахматах. Оценки основаны</small><br>
<small>на том, что в каждой шахматной позиции
существуют приблизительно</small><br>
<small>30 разрешенных ходов я что терминальные
позиции расположены на</small><br>
<small>глубине 40 ходов. Один ход равен двум
полуходам (по одному</small><br>
<small>полуходу с каждой стороны).</small></p>

<p>Так же, как и аналогичная программа поиска в И /
ИЛИ-графах, приведенная выше программа
использует стратегию в глубину. Кроме того, в ней
не исключается возможность зацикливания на
одних и тех же позициях. Попытка устранить этот
недостаток может привести к осложнениям,
поскольку правила некоторых из игр допускают
такое повторение позиций. Правда, разрешение
повторять позиции часто носит условный характер,
например по шахматным правилам после
троекратного повторения позиции может быть
объявлена ничья.</p>

<p>Программа, которую мы составили, демонстрирует
основные принципы программирования игр. Но
практически приемлемая реализация таких сложных
игр, как шахматы или го, потребовала бы
привлечения значительно более мощных методов.
Огромная комбинаторная сложность этих игр
делает наш наивный переборный алгоритм,
просматривающий дерево вплоть до терминальных
игровых позиций, абсолютно непригодным. Этот
вывод иллюстрирует (на примере шахмат) рис. 15.1:
пространство поиска имеет астрономические
размеры - около 10<sup><sup>120</sup></sup> позиций. Можно
возразить, что в дереве на рис. 15.1 встречаются
одинаковые позиции. Однако было показано, что
число различных позиций дерева поиска находится
далеко за пределами возможностей вычислительных
машин обозримого будущего.</p>

<h4>Проект</h4>

<p>Напишите программу для какой-нибудь простой
игры (такой, как <em>ним</em>), использующую
упрощенный алгоритм войска в И / ИЛИ-дереве.</p>

<hr>

<p align="center"><a href="ch14_7.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch15_2.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
