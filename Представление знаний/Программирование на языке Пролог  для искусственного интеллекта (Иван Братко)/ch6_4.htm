<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 6. Пункт 4</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch6_3.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch6_5.htm">Вперёд</a></p>
<a name="tn14"><script language="JavaScript">double_line();</script>
</a>

<h4><a name="tn17">6. 4.</a>&nbsp;&nbsp;&nbsp; <span id="t17">Создание</span> и <span
id="t14">декомпозиция атомов</span></h4>

<p>Часто желательно информацию, считанную как
последовательность<a name="tn61"> символов, иметь в
программе в виде атома. Для этой цели существует
встроенный предикат <strong><span id="t61">name</span></strong>. Он
устанавливает взаимосвязь между атомами и их
кодировкой в ASCII. Таким образом,</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>name( A, L)</strong></p>

<p>истинно, если L - список кодов ASCII, кодирующих
атом. Например,</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>name( zx232, [122, 120, 50, 51, 50]
)</strong></p>

<p>истинно. Существуют два типичных способа</a><a
name="tn15"> использования <strong>name</strong>:</p>

<p>(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span id="t15">дан атом,
разбить его на отдельные символы;</span></p>

<p>(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; дан список символов,
объединить их в один атом.</p>

<p>Примером первого случая применения предиката
является программа, которая имеет дело с
заказами такси и водителями. Все это
представлено в программе атомами</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>заказ1, заказ2,
водитель1, водитель2, такси1, таксилюкс</strong></p>

<p>Предикат</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>такси( X)</strong></p>

<p>проверяет, относится ли атом Х к тем атомам,
которые представляют такси:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>такси( Х) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name( X,
Хспис),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nаmе(
такси, Тспис),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; конк(
Тспис, _, Хспис).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; конк( [ ], L, L).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; конк( [А | L1], L2, [А | L3] )
:-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;конк(
L1, L2, L3).</strong></p>

<p>Предикаты <strong>заказ</strong> и <strong>водитель</strong>
можно определить аналогично.</p>

<p>Наш следующий пример иллюстрирует применение
объединения отдельных символов в один атом. Мы
определим предикат</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>читпредложение(
Списслов)</strong></p>

<p>который считает предложение с произвольной
формой на естественном языке и конкретизирует <strong>Списслов</strong>
некоторым внутренним представлением этого
предложения. В качестве внутреннего
представления, обеспечивающего возможность
дальнейшей обработки предложения, естественно
избрать следующее: каждое слово входного
предложения представляется прологовским атомом,
а все предложение представляется списком этих
атомов. Например, если входной поток таков:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Мэри было приятно
видеть неудачу робота.</p>

<p>то цель <strong>читпредложение( Предложение)</strong>
вызовет конкретизацию</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Предложение=['Мэри',
было, приятно, видеть, неудачу, робота]</strong></p>

<p>Для простоты будем считать, что каждое
предложение оканчивается точкой и внутри него не
используются никакие знаки препинания.</p>

<p>Программа для <strong>читпредложение</strong>
показана на рис. 6.4. Вначале процедура читает
текущий входной символ <strong>Симв</strong>, а затем
передает его процедуре <strong>читостальное</strong>
для завершения работы. Процедура <strong>читостальное</strong>
должна правильно обработать следующие три
случая:</p>

<p>(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Симв</strong> - точка,
тогда все сделано.</p>

<p>(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Симв</strong> - пробел,
- игнорировать его и <strong>читпредложение</strong> от
остального ввода.</p>

<p>(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Симв</strong> - буква, -
сначала считать слово <strong>Слово</strong>, которое
начинается с <strong>Симв</strong>, а затем запустить <strong>читпредложение</strong>,
чтобы считать оставшуюся часть предложения,
породив при этом <strong>Списслов</strong>. Общим
результатом этого будет список <strong>[Слово |
Списслов]</strong>.</p>

<p>Процедура, считывающая символы одного слова,
такова:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>читбуквы( Буква,
Буквы, Сделсимв)</strong></p>

<p>Ее три аргумента:</p>

<p>(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Буква</strong> -
текущая буква (уже считанная) читаемого слова.</p>

<p>(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Буквы</strong> -
список букв (начинающийся с буквы <strong>Буква</strong>),
оставшихся до конца слова.</p>

<p>(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Следсимв</strong> -
входной символ, непосредственно следующий за
читаемым словом. <strong>Следсимв</strong> не должен
быть буквой.</p>

<p>Мы завершим данный пример замечанием о
возможном применения процедуры <strong>читпредложение</strong>.
Ее можно использовать в программе обработки
текста на естественном языке. Предложения,
представленные в виде списков слов, имеют
удобную форму для дальнейшей обработки при
помощи Пролога. В простейшем</p>
<script language="JavaScript">line();</script>


<p><small>/*<br>
Процедура читпредложение считывает предложение
и из его слов создает список атомов. Например,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; читпредложение( Списслов)<br>
порождает<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Списслов=['Мэри', было,
приятно, видеть, неудачу, робота]<br>
если входным было предложение<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Мэри было приятно видеть
неудачу робота.</small></p>

<p><small>*/</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>читпредложение(
Списслов) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
gеt0( Симв),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
читостальное( Симв, Списслов).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; читостальное( 46, [ ])
:-&nbsp; !.</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Конец предложения: 46 = ASCII-код для ' '</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>читостальное( 32,
Списслов) :-&nbsp; !,</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% 32 = ASCII-код для пробела</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>читпредложение(
Списслов).</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Пропустить пробел</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>читостальное(
Буква, [Слово | Списслов]) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
читбуквы( Буква, Буквы, Следсимв),</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Считать буквы текущего слова</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>nаmе( Слово, Буквы),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
читостальное( Следсимв, Списслов).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; читбуквы( 46, [ ], 46) :-
&nbsp; !.</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Конец слова: 46 = точка</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>читбуквы( 32, [ ], 32) :-
&nbsp; !.</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Конец слова: 32 = пробел</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>читбуквы( Бкв, [Бкв |
Буквы], Следсимв) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
get0( Симв),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
читбуквы( Симв, Буквы, Следсимв).</strong></p>
<script language="JavaScript">line();</script>


<p align="center"><small><strong>Рис. 6. 4.</strong>&nbsp; Процедура для
преобразования предложения в список атомов.</small></p>

<p>случае такой обработкой мог бы быть поиск во
входном предложении определенных ключевых слов.
Значительно более сложной задачей является
понимание предложения, т. е. извлечение из него
смысла, представленного в некотором избранном
формализме. Это важная область исследований в
искусственном интеллекте.</p>

<h4>Упражнения</h4>

<p><strong>6. 4.</strong>&nbsp;&nbsp;&nbsp; Определите отношение</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>начинается( Атом,
Символ)</strong></p>

<p>для проверки, начинается ли <strong>Атом</strong> с
символа <strong>Символ</strong>.</p>
</a>

<p><a href="javascript:fa('6_4')">Посмотреть ответ</a></p>

<p><strong>6. 5.</strong>&nbsp;&nbsp;&nbsp; Определите процедуру <strong>plural</strong>,
которая преобразует английские существительные
из единственного числа во множественное,
добавляя к слову окончание s. Например:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>?-&nbsp; plural( table, X).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Х&nbsp; =&nbsp; tables</strong></p>

<p><a href="javascript:fa('6_5')">Посмотреть ответ</a></p>

<p><strong>6. 6.</strong>&nbsp;&nbsp;&nbsp; Напишите процедуру</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>поиск( Ключслово,
Предложение)</strong></p>

<p>которая при каждом вызове находит в текущем
входном файле предложение, содержащее заданное
ключевое слово <strong>Ключслово</strong>. <strong>Предложение</strong>
в своей исходной форме должно быть представлено
в виде последовательности символов или в виде
атома (процедуру <strong>читпредложение</strong> из
данного раздела можно соответственно
модифицировать).</p>

<hr>

<p align="center"><a href="ch6_3.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch6_5.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
