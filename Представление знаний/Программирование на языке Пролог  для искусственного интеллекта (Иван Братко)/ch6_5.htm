<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 6. Пункт 5</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch6_4.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch7_1.htm">Вперёд</a></p>
<script language="JavaScript">double_line();</script>


<h4>6. 5.&nbsp;&nbsp;&nbsp; Ввод программ:&nbsp;&nbsp;&nbsp; <em>consult,
reconsult</em></h4>

<p><a name="tn51">Передавать программы пролог-системе
можно при помощи двух встроенных
предикатов:&nbsp;&nbsp;&nbsp; <strong><span id="t51">consult</span></strong>
&nbsp;&nbsp;&nbsp; и&nbsp;&nbsp;&nbsp; <strong>reconsult</strong>. &nbsp;&nbsp;&nbsp;
Чтобы система считала программу из файла F, нужно
поставить цель</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>?-&nbsp; consult( F).</strong></p>

<p>В результате все предложения программы,
содержащейся в F, будут использованы
пролог-системой при ответе на дальнейшие вопросы
пользователя. Если позже в том же сеансе
произойдет &quot;консультация&quot; с другим файлом,
предложения этого нового файла будут просто
добавлены в конец текущего множества
предложений.</p>

<p>Для того, чтобы запустить программу, не
обязательно записывать ее в файл, а затем
&quot;консультироваться&quot; с ним. Вместо чтения
файла система может принимать программу прямо с
терминала, который соответствует псевдофайлу <strong>user</strong>.
Добиться этого можно так:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>?-&nbsp; consult( user).</strong></p>

<p>После этого система будет ожидать ввода
предложений программы с терминала.</p>

<p>В некоторых пролог - системах применяется
сокращенная запись для чтения программ из
файлов. Файлы, из которых предстоит чтение,
просто помещаются в список и этот список
используется в качестве цели. Например:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>?-&nbsp; [файл1, файл2,
файл3].</strong></p>

<p>Это в точности эквивалентно следующим трем
целям:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>?-&nbsp; соnsult( файл1),
соnsult( файл2), соnsult( файл3)</a><a name="tn70">.</strong></p>

<p>Встроенный предикат <strong><span id="t70">reconsult</span></strong>
аналогичен <strong>consult</strong>. Цель</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>?-&nbsp; reconsult( F).</strong></p>

<p>даст тот же эффект, что и <strong>consult( F)</strong> с одним
исключением. Если в F есть предложения,
касающиеся отношений, которые уже были
определены ранее, старые определения заменяются
на новые из F. Разница между <strong>consult</strong> и <strong>reconsult</strong>
в том, что <strong>consult</strong> всегда добавляет новые
предложения, в то время как <strong>reconsult</strong>
переопределяет ранее введенные определения.
Однако <strong>reconsult</strong> не произведет никакого
эффекта на те отношения, о которых в F ничего не
сказано.</p>

<p>Следует еще раз заметить, что детали
&quot;консультирования&quot; с файлами зависят от
конкретной реализации Пролога. Это замечание
касается и большинства остальных встроенных
процедур.</p>

<h4>Резюме</h4>

<ul>
  <li>Ввод и вывод (отличный от связанного с вопросами
    к программе) осуществляется посредством
    встроенных процедур. В данной главе описан
    простой и практичный набор таких процедур,
    имеющихся во многих реализациях Пролога.</li>
  <li>Файлы являются последовательными. Существуют <em>текущие
    входной</em> и <em>выходной потоки</em>.
    Пользовательский терминал рассматривается как
    файл с именем <strong>user</strong>.</li>
  <li>Переключение между потоками осуществляется с
    помощью процедур:<br>
    <br>
    &nbsp;&nbsp;&nbsp; <strong>sее( Файл)</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small><strong>Файл</strong> становится текущим входным
    потоком</small><br>
    &nbsp;&nbsp;&nbsp; <strong>tell( Файл)</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small><strong>Файл</strong> становится текущим выходным
    потоком</small><br>
    &nbsp;&nbsp;&nbsp; <strong>seen</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>закрывается текущий входной поток</small><br>
    &nbsp;&nbsp;&nbsp; <strong>told</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>закрывается текущий выходной поток</small><br>
  </li>
  <li>Файлы читаются и записываются двумя способами:<br>
    <br>
    &nbsp;&nbsp;&nbsp; как последовательности символов<br>
    &nbsp;&nbsp;&nbsp; как последовательности термов<br>
    <br>
    Встроенные процедуры для чтения и записи
    символов и термов таковы:<br>
    <br>
    &nbsp;&nbsp;&nbsp; <strong>rеad( Терм)</strong><br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>вводит следующий терм</small><br>
    &nbsp;&nbsp;&nbsp; <strong>write( Терм)</strong><br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>выводит <strong>Терм</strong></small><br>
    &nbsp;&nbsp;&nbsp; <strong>put( КодСимвола)</strong><br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>выводит символ с заданным ASCII - кодом</small><br>
    &nbsp;&nbsp;&nbsp; <strong>get0( КодСимвола)</strong><br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>вводит следующий символ</small><br>
    &nbsp;&nbsp;&nbsp; <strong>gеt( КодСимвола)</strong><br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>вводит ближайший следующий &quot;печатаемый&quot;
    символ</small><br>
  </li>
  <li>Две процедуры облегчают форматирование:<br>
    <br>
    &nbsp;&nbsp;&nbsp; <strong>nl</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>начинает новую строку</small><br>
    &nbsp;&nbsp;&nbsp; <strong>tab( N)</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <small>выводит
    N пробелов</small><br>
  </li>
  <li>Процедура <strong>nаmе( Атом, СписокКодов)</strong>
    осуществляет синтез и декомпозицию атомов. <strong>СписокКодов</strong>
    - список ASCII кодов символов, образующих <strong>Атом</strong>.</li>
</ul>

<hr>
</a>

<p align="center"><a href="ch6_4.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch7_1.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
