<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 8. Пункт 3</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch8_2.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch8_4.htm">Вперёд</a></p>
<script language="JavaScript">double_line();</script>


<h4>8. 3.&nbsp;&nbsp;&nbsp; Стиль программирования</h4>

<p>Подчиняться при программировании некоторым
стилистическим соглашениям нужно для того, чтобы

<ul>
  <li>уменьшить опасность внесения ошибок в
    программы и</li>
  <li>создавать программы, которые легко читать,
    понимать, отлаживать и модифицировать. </li>
</ul>

<p>Ниже дается обзор некоторых из составных
частей хорошего стиля программирования на
Прологе. Мы рассмотрим некоторые общие правила
хорошего стиля, табличную организацию длинных
процедур и вопросы комментирования программ<a
name="tn306">.</p>
</a><a name="p8_3_1">

<hr>
</a>

<h4>8. 3. 1.&nbsp;&nbsp;&nbsp; <span id="t306">Некоторые правила
хорошего стиля</span></h4>

<ul>
  <li>Предложения программы должны быть короткими. Их
    тела, как правило, должны содержать только
    несколько целей.</li>
  <li>Процедуры должны быть короткими, поскольку
    длинные процедуры трудны для понимания. Тем не
    менее длинные процедуры вполне допустимы в том
    случае, когда они имеют регулярную структуру
    (этот вопрос еще будет обсуждаться в данной
    главе).</li>
  <li>Следует применять мнемонические имена процедур
    и переменных. Они должны отражать смысл
    отношений и роль объектов данных.</li>
  <li>Существенное значение имеет расположение
    текста программы. Для улучшения читабельности
    программы нужно постоянно применять пробелы,
    пустые строки и отступы. Предложения,
    относящиеся к одной процедуре, следует размещать
    вместе в виде отдельной группы строк; между
    предложениями нужно вставлять пустую строку
    (этого не нужно делать, возможно, только в случае
    перечисления большого количества фактов,
    касающихся одного отношения); каждую цель можно
    размещать на отдельной строке. Пролог-программы
    иной раз напоминают стихи по эстетической
    привлекательности своих идей и формы.</li>
  <li>Стилистические соглашения такого рода могут
    варьироваться от программы к программе, так как
    они зависят от задачи и от личного вкуса. Важно,
    однако, чтобы на протяжении одной программы
    постоянно применялись одни и те же соглашения.</li>
  <li>Оператор отсечения следует применять с
    осторожностью. Если легко можно обойтись без
    него - не пользуйтесь им. Всегда, когда это
    возможно, предпочтение следует отдавать
    &quot;зеленым отсечениям&quot; перед &quot;красными&quot;.
    Как говорилось в гл. 5, отсечение называется
    &quot;зеленым&quot;, если его можно убрать, на
    затрагивая декларативный смысл предложения.
    Использование &quot;красных отсечений&quot; должно
    ограничиваться четко определенными
    конструкциями, такими как оператор <strong>not</strong>
    или конструкция выбора между альтернативами.
    Примером последней может служить<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>если</em> <strong>Условие</strong>
    <em>то</em> <strong>Цель1</strong> <em>иначе</em> <strong>Цель2</strong><br>
    <br>
    С использованием отсечения эта конструкция
    переводится на Пролог так:<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Условие,&nbsp; !.</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <small>% Условие
    выполнено?</small><br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Цель1;</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>% Если да, то Цель1</small><br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Цель2</strong>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <small>% Иначе - Цель2</small><br>
  </li>
  <li>Из-за того, что оператор <strong>not</strong> связан с
    отсечением, он тоже может привести к
    неожиданностям. Поэтому, применяя его, следует
    всегда помнить точное прологовское определение
    этого оператора. Тем не менее, если приходится
    выбирать между <strong>not</strong> и отсечением, то лучше
    использовать <strong>not</strong>, чем какую-нибудь
    туманную конструкцию с отсечением.</li>
  <li>Внесение изменений в программу при помощи <strong>assert</strong>
    и <strong>retract</strong> может сделать поведение
    программы значительно менее понятным. В
    частности, одна и та же программа на одни н те же
    вопросы будет отвечать по-разному в разные
    моменты времени. В таких случаях, если мы захотим
    повторно воспроизвести исходное поведение
    программы, нам придется предварительно
    убедиться в том, что ее исходное состояние,
    нарушенное при обращении к <strong>assert</strong> и <strong>retract</strong>,
    полностью восстановлено.</li>
  <li>Применение точек с запятой может затемнять
    смысл предложений. Читабельность можно иногда
    улучшить, разбивая предложения, содержащие точки
    с запятой, на несколько новых предложений, однако
    за это, возможно, придется заплатить увеличенном
    длины программы и потерей в ее эффективности.</li>
</ul>

<p>Для иллюстрации некоторых положений данного
раздела рассмотрим отношение</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>слить( Спис1, Спис2,
Спис3)</strong></p>

<p>где <strong>Спис1</strong> и <strong>Спис2</strong> -
упорядоченные списки, а <strong>Спис3</strong> -результат
их слияния (тоже упорядоченный). Например:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>слить( [2, 4, 7], [1, 3, 4, 8],
[1, 2, 3, 4, 4, 7, 8] )</strong></p>

<p>Вот стилистически неудачная реализация этого
отношения:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>слить( Спис1, Спис2,
Спис3) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Спис1 = [ ],&nbsp; !,&nbsp; Спис3 = Спис2;</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Первый список пуст</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>Спис2 = [ ],&nbsp; !,&nbsp; Спис3 = Спис1;</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Второй список пуст</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>Спис1 = [X | Остальные],<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Спис2 = [Y | Остальные],<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
( Х &lt; Y,&nbsp; !,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Z = X,</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Z - голова Спис3</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>слить( Остальные1, Спис2, Остальные3 );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Z = Y,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
слить( Спис1, Остальные2, Остальные3 ) ),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Спис3 = [Z | Остальные3].</strong></p>

<p>Вот более предпочтительный вариант, не
использующий точек с запятой:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>слить( [ ], Спис,
Спис).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; слить( Спис, [ ],
Спис).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
слить( [X | Остальные1], [Y | Остальные2], [X |
Остальные3] ) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Х &lt; Y,&nbsp; !,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
слить(Остальные1, [Y | Остальные2], Остальные3).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
слить( Спис1, [Y | Остальные2], [Y | Остальные3]): -<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
слить( Спис1, Остальные2, Остальные3 )<a name="tn251">.</strong></p>
</a><a name="p8_3_2">

<hr>
</a>

<h4>8. 3. 2.&nbsp;&nbsp;&nbsp; <span id="t251">Табличная организация
длинных процедур</span></h4>

<p>Длинные процедуры допустимы, если они имеют
регулярную структуру. Обычно эта структура
представляет собой множество фактов,
соответствующее определению какого-либо
отношения в табличной форме. Преимущества такой
организации длинной процедуры состоят в том, что:

<ul>
  <li>Ее структуру легко понять.</li>
  <li>Ее удобно совершенствовать: улучшать ее можно,
    просто добавляя новые факты.</li>
  <li>Ее легко проверять и модифицировать (просто
    заменяя отдельные факты, независимо от
    остальных)<a name="tn305">.</li>
</ul>
</a><a name="p8_3_3">

<hr>
</a>

<p><strong>8. 3. 3.&nbsp;&nbsp;&nbsp; <span id="t305">Комментирование</span></strong></p>

<p>Программные комментарии должны объяснять в
первую очередь, для чего программа предназначена
и как ею пользоваться, и только затем -
подробности используемого метода решения и
другие программные детали. Главная цель
комментариев - обеспечить пользователю
возможность применять программу, понимать ее и,
может быть, модифицировать. Комментарии должны
содержать в наиболее краткой форме всю
необходимую для этого информацию. Недостаточное
комментирование - распространенная ошибка,
однако, программу можно и перенасытить
комментариями. Объяснения деталей, которые и так
ясны из самого текста программы, являются
ненужной перегрузкой.</p>

<p>Длинные фрагменты комментариев следует
располагать перед текстом, к которому они
относятся, в то время как короткие комментарии
должны быть вкраплены в сам текст. Информация,
которую в самом общем случае следует включать в
комментарии, должна схватывать следующие
вопросы: 

<ul>
  <li>Что программа делает, как ею пользоваться
    (например, какую цель следует активизировать и
    каков вид ожидаемых результатов), примеры ее
    применения.</li>
  <li>Какие предикаты относятся к верхнему уровню?</li>
  <li>Как представлены основные понятия (объекты)?</li>
  <li>Время выполнения и требования по объему памяти.</li>
  <li>Каковы ограничения на программу?</li>
  <li>Использует ли она какие-либо средства,
    связанные с конкретной операционной системой?</li>
  <li>Каков смысл предикатов программы? Каковы их
    аргументы? Какие аргументы являются
    &quot;входными&quot; и какие - &quot;выходными&quot;, если
    это известно? (В момент запуска предиката входные
    аргументы имеют полностью определенные
    значения, не содержащие не конкретизированных
    переменных.)</li>
  <li>Алгоритмические и реализационные детали.</li>
</ul>

<hr>

<p align="center"><a href="ch8_2.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch8_4.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
