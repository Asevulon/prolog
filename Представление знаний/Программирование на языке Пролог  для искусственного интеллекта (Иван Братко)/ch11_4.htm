<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 11. Пункт 4</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch11_3.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch12_1.htm">Вперёд</a></p>
<script language="JavaScript">double_line();</script>


<h4>11. 4.&nbsp;&nbsp;&nbsp; Замечания относительно поиска в
графах, оптимальности к сложности</h4>

<p>Сейчас уместно сделать ряд замечаний
относительно программ поиска, разработанных к
настоящему моменту: во-первых, о поиске в графах,
во-вторых, об оптимальности полученных решений и,
в-третьих, о сложности поиска.</p>

<p>Приведенные примеры могли создать ложное
впечатление, что наши программы поиска в ширину
способны работать только в пространствах
состояний, являющихся деревьями, а не графами
общего вида. На самом деле, тот факт, что в одной
из версий множество путей-кандидатов
представлялось деревом, совсем не означает, что и
само пространство состояний должно было быть
деревом. Когда поиск проводится в графе, граф
фактически разворачивается в дерево, причем
некоторые пути, возможно, дублируются в разных
частях этого дерева (см. рис. 11.14).</p>

<p>Наши программы поиска в ширину порождают
решающие пути один за другим в порядке
увеличения их</p>

<p align="center"><img src="pic/fig11_14.gif" width="398" height="180"
alt="fig11_14.gif (1726 bytes)"></p>

<p align="center"><small><strong>Рис. 11. 14.</strong>&nbsp;&nbsp;&nbsp; (а)
&nbsp;&nbsp;&nbsp; Пространство состояний;&nbsp; а - &nbsp;
стартовая вершина.</small><br>
<small>(b) &nbsp;&nbsp;&nbsp; Дерево всех возможных
ациклических путей, ведущих из&nbsp; <strong>а</strong>,</small><br>
<small>порожденное программой поиска в ширину.</small></p>

<p>длин - самые короткие решения идут первыми. Это
является важным обстоятельством, если нам
необходима оптимальность (в отношении длины
решения). Стратегия поиска в ширину гарантирует
получение кратчайшего решения первым.
Разумеется, это неверно для поиска в глубину.</p>

<p>Наши программы, однако, не учитывают стоимости,
приписанные дугам в пространстве состояний. Если
критерием оптимальности является минимум
стоимости решающего пути (а не его длина), то в
этом случае поиска в ширину недостаточно. Поиск с
предпочтением из гл. 12 будет направлен на
оптимизацию стоимости.</p>

<p>Еще<a name="tn145"> одна типичная проблема, связанная
с задачей поиска, - это проблема <em><span id="t145">комбинаторной
сложности</span></em>. Для нетривиальных предметных
областей число альтернатив столь велико, что
проблема сложности часто принимает критический
характер. Легко понять, почему это происходит:
если каждая вершина имеет&nbsp; b&nbsp; преемников, то
число путей длины&nbsp; l,&nbsp; ведущих из стартовой
вершины, равно&nbsp; b<sup>l</sup>&nbsp; ( в предположении,
что циклов нет). Таким образом, вместе с
увеличением длин путей наблюдается <em>экспоненциальный</em>
рост</a><a name="tn146"> объема множества
путей-кандидатов, что приводит к ситуации,
называемой <em><span id="t146">комбинаторным взрывом</span></em>.
Стратегии поиска в глубину и ширину недостаточно
&quot;умны&quot; для борьбы с такой степенью
комбинаторной сложности: отсутствие
селективности приводит к тому, что все пути
рассматриваются как одинаково перспективные.</p>

<p>По-видимому, более изощренные процедуры поиска
должны использовать какую-либо информацию,
отражающую специфику данной задачи, с тем чтобы
на каждой стадии поиска принимать решения о
наиболее перспективных путях поиска. В
результате процесс будет продвигаться к целевой
вершине, обходя бесполезные пути. Информация,
относящаяся к конкретной решаемой задаче и
используемая для управления поиском, называется <em>эвристикой</em>.
Про</a> алгоритмы, использующие эвристики,<a name="tn343">
говорят, что они <em>руководствуются эвристиками</em>:
они выполняют <em><span id="t343">эвристический поиск</span></em>.
Один из таких методов изложен в следующей главе.</p>

<h4>Резюме</h4>

<ul>
  <li><em>Пространство состояний</em> есть формализм для
    представления задач.</li>
  <li>Пространство состояний - это направленный граф,
    вершины которого соответствуют проблемным
    ситуациям, а дуги - возможным ходам. Конкретная
    задача определяется <em>стартовой вершиной</em> и <em>целевым
    условием</em>. Решению задачи соответствует путь в
    графе. Таким образом, решение задачи сводится к
    поиску пути в графе.</li>
  <li>Оптимизационные задачи моделируются
    приписыванием каждой дуге пространства
    состояний некоторой стоимости.</li>
  <li>Имеются две основных стратегии поиска в
    пространстве состояний - <em>поиск в глубину</em> и <em>поиск
    в ширину</em>.</li>
  <li>Поиск в глубину программируется наиболее легко,
    однако подвержен зацикливаниям. Существуют два
    простых метода предотвращения зацикливания:
    ограничить глубину поиска и не допускать
    дублирования вершин.</li>
  <li>Реализация поиска в ширину более сложна,
    поскольку требуется сохранять множество
    кандидатов. Это множество может быть с легкостью
    представлено списком списков, но более экономное
    представление - в виде дерева.</li>
  <li>Поиск в ширину всегда первым обнаруживает самое
    короткое решение, что не верно в отношении
    стратегии поиска в глубину.</li>
  <li>В случае обширных пространств состояний
    существует опасность <em>комбинаторного взрыва</em>.
    Обе стратегии плохо приспособлены для борьбы с
    этой трудностью. В таких случаях необходимо
    руководствоваться эвристиками.</li>
  <li>В этой главе были введены следующие понятия:<br>
    <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; пространство состояний<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; стартовая вершина,
    целевое условие,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; решающий путь<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; стратегия поиска<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; поиск в глубину, поиск в
    ширину<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; эвристический поиск.</li>
</ul>

<h4>Литература</h4>

<p>Поиск в глубину и поиск в ширину - базовые
стратегии поиска, они описаны в любом учебнике по
искусственному интеллекту, см., например, Nilsson (1971,
1980) или Winston (1984). Р. Ковальский в своей книге Kowalski
(1980) показывает, как можно использовать аппарат
математической логики для реализации этих
принципов.</p>

<p>Kowalski R. (1980). <em>Logic for Problem Solving.</em> North-Holland.</p>

<p>Nilsson N. J. (1971). <em>Problem Solving Methods in Artificial Intelligence.</em>
McGraw-Hill.</p>

<p>Nilsson N. J. (1980). <em>Principles of Artificial Intelligence.</em> Tioga; also
Springer- Verlag, 1981.</p>

<p>Winston P. H. (1984). <em>Artificial Intelligence (second edition).</em>
Addison-Wesley. [Имеется перевод первого издания:
Уинстон П. Искусственный интеллект. - М.: Мир, 1980.]</p>

<hr>
</a>

<p align="center"><a href="ch11_3.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch12_1.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
