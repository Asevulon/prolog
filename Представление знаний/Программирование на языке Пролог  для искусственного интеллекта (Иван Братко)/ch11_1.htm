<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<title>Глава 11. Пункт 1</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script src="script.js" type="text/javascript"></script>
</head>

<body bgColor="#fff5ee">

<p align="center"><a href="ch10_2.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch11_2.htm">Вперёд</a></p>

<hr>

<h4 align="center">Глава 11.</h4>

<h4 align="center">ОСНОВНЫЕ СТРАТЕГИИ РЕШЕНИЯ ЗАДАЧ</h4>

<p>В данной главе мы сосредоточим свое внимание на
одной <a name="tn246">общей схеме для представления
задач, называемой <em>пространством состояний</em>. <span
id="t246">Пространство состояний</span> - это граф,
вершины которого соответствуют ситуациям,
встречающимся в задаче (&quot;проблемные
ситуации&quot;), а решение задачи сводится к поиску
пути в этом графе. Мы изучим на примерах, как
формулируются задачи в терминах пространства
состояний, а также обсудим общие методы решения
задач, представленных в рамках этого формализма.
Процесс решения задачи включает в себя поиск в
графе, при этом, как правило, возникает проблема,
как обрабатывать альтернативные пути поиска. В
этой главе будут представлены две основные
стратегии перебора альтернатив, а именно поиск в
глубину и поиск в ширину.</p>
</a><a name="p11_1"><script language="JavaScript">double_line();</script>
</a>

<h4>11. 1.&nbsp;&nbsp;&nbsp; Предварительные понятия и
примеры</h4>

<p>Рассмотрим пример, представленный на рис. 11.1.
Задача состоит в выработке плана
переупорядочивания кубиков, поставленных друг
на друга, как показано на рисунке. На каждом шагу
разрешается переставлять только один кубик.
Кубик можно взять только тогда, когда его верхняя
поверхность свободна. Кубик можно поставить либо
на стол, либо на другой кубик. Для того, чтобы
построить требуемый план, мы должны отыскать
последовательность ходов, реализующую заданную
трансформацию.</p>

<p>Эту задачу можно представлять себе как задачу
выбора среди множества возможных альтернатив. В
исходной ситуации альтернатива всего одна:
поставить кубик С на стол. После того как кубик С
поставлен на стол, мы имеем три альтернативы: 

<ul>
  <li>поставить А на стол или</li>
  <li>поставить А на С, или</li>
  <li>поставить С на А.</li>
</ul>

<p align="center"><img src="pic/fig11_1.gif" width="380" height="116"
alt="fig11_1.gif (1080 bytes)"></p>

<p align="center"><small><strong>Рис. 11. 1.</strong>&nbsp; Задача
перестановки кубиков.</small></p>

<p>Ясно, что альтернативу &quot;поставить С на
стол&quot; не имело смысла рассматривать всерьез,
так как этот ход никак не влияет на ситуацию.</p>

<p>Как показывает рассмотренный пример, с
задачами такого рода связано два типа понятий:</p>

<p>(1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Проблемные ситуации.<br>
(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Разрешенные ходы или
действия, преобразующие одни проблемные
ситуации в другие.</p>

<p>Проблемные ситуации вместе с возможными ходами
образуют направленный граф, называемый <em>пространством
состояний</em>. Пространство состояний для только
что рассмотренного примера дано на рис. 11.2.
Вершины графа соответствуют проблемным
ситуациям, дуги - разрешенным переходам из одних
состояний в другие. Задача отыскания плана
решения задачи эквивалентна задаче построения
пути между заданной начальной ситуацией
(&quot;стартовой&quot; вершиной) и некоторой указанной
заранее конечной ситуацией, называемой также <em>целевой
вершиной</em><a name="tn89">.</p>

<p>На рис. 11.3 показан еще один пример задачи: <span
id="t89">головоломка &quot;игра в восемь&quot;</span> в ее
представление в виде задачи поиска пути. В
головоломке используется восемь перемещаемых
фишек, пронумерованных цифрами от 1 до 8. Фишки
располагаются в девяти ячейках, образующих
матрицу 3 на 3. Одна из ячеек</p>

<p align="center"><img src="pic/fig11_2.gif" width="567" height="380"
alt="fig11_2.gif (3837 bytes)"></p>

<p align="center"><small><strong>Рис</a><a name="tn249">. 11. 2.</strong>&nbsp; <span
id="t249">Графическое представление</span> задачи
манипулирования</small><br>
<small>кубиками. Выделенный путь является решением
задачи рис. 11.1.</small></p>

<p>всегда пуста, и любая смежная с ней фишка может
быть передвинута в эту пустую ячейку. Можно
сказать и по-другому, что пустой ячейке
разрешается перемещаться, меняясь местами с
любой из смежных с ней фишек. Конечная ситуация -
это некоторая заранее заданная конфигурация
фишек, как показано на рис. 11.3.</p>

<p>Нетрудно построить аналогичное представление
в виде графа и для других популярных головоломок.
Наиболее очевидные примеры - это задача о
&quot;ханойской башне&quot; и задача о перевозке через
реку волка, козы и капусты. Во второй из этих
задач предполагается, что вместе с человекам в
лодке помещается только один объект и что
человеку приходится охра-</p>

<p align="center"><img src="pic/fig11_3.gif" width="368" height="431"
alt="fig11_3.gif (4054 bytes)"></p>

<p align="center"><small><strong>Рис. 11. 3.</strong>&nbsp; &quot;Игра в
восемь&quot; и ее представление в форме графа.</small></p>

<p>нять козу от волка и капусту от козы. С
описанной парадигмой согласуются также многие
задачи, имеющие практическое значение. Среди них
- задача о коммивояжере, которая может служить
моделью для многих практических оптимизационных
задач. В задаче дается карта с <em>n</em> городами в
указываются расстояния, которые надо преодолеть
по дорогам при переезде из города в город.
Необходимо найти маршрут, начинающийся в
некотором городе, проходящий через все города и
заканчивающиеся в том же городе. Ни один город, за
исключением начального, не разрешается посещать
дважды.</p>

<p>Давайте подытожим те понятия, которые мы ввели,
рассматривая примеры. Пространство состояний
некоторой задачи определяет &quot;правила игры&quot;:
вершины пространства состояния соответствуют
ситуациям, а дуги - разрешенным ходам или
действиям, или шагам решения задачи. Конкретная
задача определяется 

<ul>
  <li>пространством состояний</li>
  <li>стартовой вершиной</li>
  <li>целевым условием (т.е. условием, к достижению
    которого следует стремиться); &quot;целевые
    вершины&quot; - это вершины, удовлетворяющие этим
    условиям.</li>
</ul>

<p>Каждому разрешенному ходу или действию можно
приписать его стоимость. Например, в задаче
манипуляции кубиками стоимости, приписанные тем
или иным перемещениям кубиков, будут указывать
иам на то, что некоторые кубики перемещать
труднее, чем другие. В задаче о коммивояжере ходы
соответствуют переездам из города в город. Ясно,
что в данном случае стоимость хода - это
расстояние между соответствующими городами.</p>

<p>В тех случаях, когда каждый ход имеет стоимость,
мы заинтересованы в отыскании решения
минимальной стоимости. Стоимость решения - это
сумма стоимостей дуг, из которых состоит
&quot;решающий путь&quot; - путь из стартовой вершины в
целевую. Даже если стоимости не заданы, все равно
может возникнуть оптимизационная задача: нас
может интересовать кратчайшее решение.</p>

<p>Прежде тем будут рассмотрены некоторые
программы, реализующие классический алгоритм
поиска в пространстве состоянии, давайте сначала
обсудим. как пространство состояний может быть
представлено в прологовской программе.</p>

<p>Мы будем представлять пространство состояний
при помощи отношения</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>после( X, Y)</strong></p>

<p>которое истинно тогда, когда в пространстве
состояний существует разрешенный ход из вершины
&nbsp; Х&nbsp; в вершину&nbsp; Y.&nbsp; Будем говорить, что
&nbsp; Y&nbsp; - это <em>преемник</em> вершины&nbsp; X.&nbsp; Если
с ходами связаны их стоимости, мы добавим третий
аргумент, стоимость хода:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>после( X, Y, Ст)</strong></p>

<p>Эти отношения можно задавать в программе явным
образом при помощи набора соответствующих
фактов. Однако такой принцип оказывается
непрактичным и нереальным для тех типичных
случаев, когда пространство состояний устроено
достаточно сложно. Поэтому отношение следования <strong>после</strong>
обычно определяется неявно, при помощи правил
вычисления вершин-преемников некоторой заданной
вершины. Другим вопросом, представляющим интерес
с самой общей точки зрения, является вопрос о
способе представления состояний, т.е. самих
вершин. Это представление должно быть
компактным, но в то же время оно должно
обеспечивать эффективное выполнение
необходимых операций, в частности операции
вычисления вершин-преемников, а возможно и
стоимостей соответствующих ходов.</p>

<p>Рассмотрим в качестве примера задачу
манипулирования кубиками, проиллюстрированную
на рис. 11.1. Мы будем рассматривать более общий
случай, когда имеется произвольное число
кубиков, из которых составлены столбики, - один
или несколько. Число столбиков мы ограничим
некоторым максимальным числом, чтобы задача была
интереснее. Такое ограничение, кроме того,
является вполне реальным, поскольку рабочее
пространство, которым располагает робот,
манипулирующий - кубиками, ограничено.</p>

<p>Проблемную ситуацию можно представить как
список столбиков. Каждый столбик в свою очередь
представляется списком кубиков, из которых он
составлен. Кубики упорядочены в списке таким
образом, что самый верхний кубик находится в
голове списка. &quot;Пустые&quot; столбики
изображаются как пустые списки. Таким образом,
исходную ситуацию рис. 11.1 можно записать как терм</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>[ [с, а, b], [ ], [ ] ]</strong></p>

<p>Целевая ситуация - это любая конфигурация
кубиков, содержащая, столбик, составленный из
всех имеющихся кубиков в указанном порядке.
Таких ситуаций три:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>[ [a, b, c], [ ], [ ] ]</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ [ ], [а, b, с], [ ] ]</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ [ ], [ ], [a, b, c] ]</strong></p>

<p>Отношение следования можно запрограммировать,
исходя из следующего правила: ситуация <strong>Сит2</strong>
есть преемник ситуации <strong>Сит1</strong>, если в <strong>Сит1</strong>
имеется два столбика <strong>Столб1</strong> и <strong>Столб2</strong>,
такие, что верхний кубик из <strong>Столб1</strong> можно
поставить сверху на <strong>Столб2</strong> и получить
тем самым <strong>Сит2</strong>. Поскольку все ситуации -
это списки столбиков, правило транслируется на
Пролог так:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>после( Столбы,
[Столб1, [Верх1 | Столб2], Остальные]) :-</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Переставить Верх1 на Столб2</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>удалить( [Верх1 | Столб1], Столб1, Столб1),</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Найти первый столбик</small><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>удалить( Столб2, Столбы1, Остальные).</strong><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<small>% Найти второй столбик</small></p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>удалить( X, [X | L], L).</strong></p>

<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; удалить( X, [Y | L], [Y | L1]
) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
удалить( L, X, L1).</strong></p>

<p>В нашем примере целевое условие имеет вид:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>цель( Ситуация) :-<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
принадлежит [а,b,с], Ситуация)</strong></p>

<p>Алгоритм поиска мы запрограммируем как
отношение</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>решить( Старт,
Решение)</strong></p>

<p>где <strong>Старт</strong> - стартовая вершина
пространства состояний, а <strong>Решение</strong> -
путь, ведущий из вершины <strong>Старт</strong> в любую
целевую вершину. Для нашего конкретного примера
обращение к пролог-системе имеет вид:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>?-&nbsp; решить( [ [с, а,
b], [ ], [ ] ], Решение).</strong></p>

<p>В результате успешного поиска переменная <strong>Решение</strong>
конкретизируется и превращается в список
конфигураций кубиков. Этот список представляет
собой план преобразования исходного состояния в
состояние, в котором все три кубика поставлены
друг на друга в указанном порядке <strong>[а, b, с]</strong>.</p>

<hr>
</a>

<p align="center"><a href="ch10_2.htm">Назад</a> | <a href="index.htm">Содержание</a>
| <a href="ch11_2.htm">Вперёд</a></p>
</body>
<script language="JavaScript">

hl();

</script>

</html>
